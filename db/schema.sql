-- MySQL Script generated by MySQL Workbench
-- Thu 31 Jan 2019 04:00:17 PM EST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='';

-- -----------------------------------------------------
-- Schema cenozo
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema salix
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `salix` ;

-- -----------------------------------------------------
-- Schema salix
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `salix` ;
USE `salix` ;

-- -----------------------------------------------------
-- Table `salix`.`service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`service` ;

CREATE TABLE IF NOT EXISTS `salix`.`service` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `method` ENUM('DELETE','GET','PATCH','POST','PUT') NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `resource` TINYINT(1) NOT NULL DEFAULT 0,
  `restricted` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `uq_method_subject_resource` (`method` ASC, `subject` ASC, `resource` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`writelog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`writelog` ;

CREATE TABLE IF NOT EXISTS `salix`.`writelog` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `method` ENUM('DELETE','PATCH','POST','PUT') NOT NULL,
  `path` VARCHAR(512) NOT NULL,
  `elapsed` FLOAT NULL,
  `status` INT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `dk_datetime` (`datetime` DESC),
  CONSTRAINT `fk_writelog_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`role_has_service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`role_has_service` ;

CREATE TABLE IF NOT EXISTS `salix`.`role_has_service` (
  `role_id` INT UNSIGNED NOT NULL,
  `service_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NULL,
  `create_timestamp` TIMESTAMP NULL,
  PRIMARY KEY (`role_id`, `service_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_service_id` (`service_id` ASC),
  CONSTRAINT `fk_role_has_service_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_service_service_id`
    FOREIGN KEY (`service_id`)
    REFERENCES `salix`.`service` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`apex_host`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`apex_host` ;

CREATE TABLE IF NOT EXISTS `salix`.`apex_host` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `host` VARCHAR(45) NOT NULL,
  `sql_user` VARCHAR(45) NOT NULL,
  `sql_pass` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`setting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`setting` ;

CREATE TABLE IF NOT EXISTS `salix`.`setting` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `priority_apex_host_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_site_id` (`site_id` ASC),
  INDEX `fk_priority_apex_host_id` (`priority_apex_host_id` ASC),
  CONSTRAINT `fk_setting_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_priority_apex_host_id`
    FOREIGN KEY (`priority_apex_host_id`)
    REFERENCES `salix`.`apex_host` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`access`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`access` ;

CREATE TABLE IF NOT EXISTS `salix`.`access` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `datetime` DATETIME NULL,
  `microtime` DOUBLE NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_user_id_role_id_site_id` (`user_id` ASC, `role_id` ASC, `site_id` ASC),
  INDEX `dk_datetime_microtime` (`datetime` ASC, `microtime` ASC),
  CONSTRAINT `fk_access_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_access_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_access_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`apex_baseline`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`apex_baseline` ;

CREATE TABLE IF NOT EXISTS `salix`.`apex_baseline` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `dob` DATETIME NOT NULL,
  `ethnicity` ENUM('W', 'B', 'H', 'O') NOT NULL DEFAULT 'W',
  `sex` ENUM('M', 'F') NOT NULL DEFAULT 'M',
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  UNIQUE INDEX `uq_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_apex_baseline_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`serial_number`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`serial_number` ;

CREATE TABLE IF NOT EXISTS `salix`.`serial_number` (
  `id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_serial_number_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`apex_exam`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`apex_exam` ;

CREATE TABLE IF NOT EXISTS `salix`.`apex_exam` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `apex_baseline_id` INT UNSIGNED NOT NULL,
  `serial_number_id` INT UNSIGNED NOT NULL,
  `barcode` VARCHAR(10) NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `height` FLOAT NULL DEFAULT NULL,
  `weight` FLOAT NULL DEFAULT NULL,
  `age` FLOAT NULL DEFAULT NULL,
  `technician` VARCHAR(128) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_apex_baseline_id` (`apex_baseline_id` ASC),
  INDEX `fk_serial_number_id` (`serial_number_id` ASC),
  UNIQUE INDEX `uq_serial_number_id_barcode` (`serial_number_id` ASC, `barcode` ASC),
  UNIQUE INDEX `uq_apex_baseline_id_rank` (`apex_baseline_id` ASC, `rank` ASC),
  CONSTRAINT `fk_apex_exam_apex_baseline_id`
    FOREIGN KEY (`apex_baseline_id`)
    REFERENCES `salix`.`apex_baseline` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_apex_exam_serial_number_id`
    FOREIGN KEY (`serial_number_id`)
    REFERENCES `salix`.`serial_number` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`scan_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`scan_type` ;

CREATE TABLE IF NOT EXISTS `salix`.`scan_type` (
  `id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `type` ENUM('hip', 'lateral', 'forearm', 'spine', 'wbody') NOT NULL,
  `side` ENUM('left', 'right', 'none') NOT NULL DEFAULT 'none',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_type_side` (`type` ASC, `side` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`apex_scan`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`apex_scan` ;

CREATE TABLE IF NOT EXISTS `salix`.`apex_scan` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `apex_exam_id` INT UNSIGNED NOT NULL,
  `scan_type_id` INT UNSIGNED NOT NULL,
  `availability` TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,
  `priority` TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,
  `invalid` TINYINT(1) UNSIGNED NULL DEFAULT NULL,
  `scan_datetime` DATETIME NULL DEFAULT NULL,
  `scanid` VARCHAR(13) NULL DEFAULT NULL,
  `patient_key` VARCHAR(24) NULL DEFAULT NULL,
  `forearm_length` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_apex_exam_id` (`apex_exam_id` ASC),
  UNIQUE INDEX `uq_apex_exam_id_scan_type_id` (`apex_exam_id` ASC, `scan_type_id` ASC),
  INDEX `fk_scan_type_id` (`scan_type_id` ASC),
  CONSTRAINT `fk_apex_scan_apex_exam_id`
    FOREIGN KEY (`apex_exam_id`)
    REFERENCES `salix`.`apex_exam` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_apex_scan_scan_type_id`
    FOREIGN KEY (`scan_type_id`)
    REFERENCES `salix`.`scan_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`code_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`code_type` ;

CREATE TABLE IF NOT EXISTS `salix`.`code_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `code` VARCHAR(45) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_code` (`code` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`scan_type_has_code_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`scan_type_has_code_type` ;

CREATE TABLE IF NOT EXISTS `salix`.`scan_type_has_code_type` (
  `code_type_id` INT UNSIGNED NOT NULL,
  `scan_type_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`code_type_id`, `scan_type_id`),
  INDEX `fk_scan_type_id` (`scan_type_id` ASC),
  INDEX `fk_code_type_id` (`code_type_id` ASC),
  CONSTRAINT `fk_scan_type_has_code_type_code_type_id`
    FOREIGN KEY (`code_type_id`)
    REFERENCES `salix`.`code_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_scan_type_has_code_type_scan_type_id`
    FOREIGN KEY (`scan_type_id`)
    REFERENCES `salix`.`scan_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`apex_deployment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`apex_deployment` ;

CREATE TABLE IF NOT EXISTS `salix`.`apex_deployment` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `apex_scan_id` INT UNSIGNED NOT NULL,
  `apex_host_id` INT UNSIGNED NOT NULL,
  `merged` TINYINT(1) NOT NULL DEFAULT 0,
  `status` ENUM('pending', 'completed', 'exported') NULL DEFAULT NULL,
  `comp_scanid` VARCHAR(13) NULL DEFAULT NULL,
  `export_filename` VARCHAR(255) NULL DEFAULT NULL,
  `analysis_datetime` DATETIME NULL DEFAULT NULL,
  `export_datetime` DATETIME NULL DEFAULT NULL,
  `import_datetime` DATETIME NULL DEFAULT NULL,
  `note` TEXT NULL DEFAULT NULL,
  `pass` TINYINT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_apex_scan_id` (`apex_scan_id` ASC),
  INDEX `fk_apex_host_id` (`apex_host_id` ASC),
  UNIQUE INDEX `uq_apex_scan_id_apex_host_id` (`apex_scan_id` ASC, `apex_host_id` ASC),
  CONSTRAINT `fk_apex_deployment_apex_scan_id`
    FOREIGN KEY (`apex_scan_id`)
    REFERENCES `salix`.`apex_scan` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_apex_deployment_apex_host_id`
    FOREIGN KEY (`apex_host_id`)
    REFERENCES `salix`.`apex_host` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`code`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`code` ;

CREATE TABLE IF NOT EXISTS `salix`.`code` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `apex_deployment_id` INT UNSIGNED NOT NULL,
  `code_type_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_code_type_id` (`code_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_apex_deployment_id` (`apex_deployment_id` ASC),
  UNIQUE INDEX `uq_apex_deployment_id_code_type_id` (`apex_deployment_id` ASC, `code_type_id` ASC),
  CONSTRAINT `fk_code_code_type_id`
    FOREIGN KEY (`code_type_id`)
    REFERENCES `salix`.`code_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_code_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_code_apex_deployment_id`
    FOREIGN KEY (`apex_deployment_id`)
    REFERENCES `salix`.`apex_deployment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`apex_deployment_code_summary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`apex_deployment_code_summary` ;

CREATE TABLE IF NOT EXISTS `salix`.`apex_deployment_code_summary` (
  `apex_deployment_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `summary` VARCHAR(255) NULL,
  PRIMARY KEY (`apex_deployment_id`),
  INDEX `dk_apex_deployment_id` (`apex_deployment_id` ASC),
  CONSTRAINT `fk_apex_deployment_code_summary_apex_deployment_id`
    FOREIGN KEY (`apex_deployment_id`)
    REFERENCES `salix`.`apex_deployment` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`apex_baseline_first_apex_exam`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`apex_baseline_first_apex_exam` ;

CREATE TABLE IF NOT EXISTS `salix`.`apex_baseline_first_apex_exam` (
  `apex_baseline_id` INT UNSIGNED NOT NULL,
  `apex_exam_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`apex_baseline_id`),
  INDEX `fk_apex_exam_id` (`apex_exam_id` ASC),
  CONSTRAINT `fk_apex_baseline_first_apex_exam_apex_baseline_id`
    FOREIGN KEY (`apex_baseline_id`)
    REFERENCES `salix`.`apex_baseline` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_apex_baseline_first_apex_exam_apex_exam_id`
    FOREIGN KEY (`apex_exam_id`)
    REFERENCES `salix`.`apex_exam` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `salix`.`allocation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `salix`.`allocation` ;

CREATE TABLE IF NOT EXISTS `salix`.`allocation` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_timestamp` TIMESTAMP NOT NULL,
  `apex_host_id` INT UNSIGNED NOT NULL,
  `scan_type_id` INT UNSIGNED NOT NULL,
  `weight` FLOAT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_apex_host_id` (`apex_host_id` ASC),
  INDEX `fk_scan_type_id` (`scan_type_id` ASC),
  UNIQUE INDEX `uq_apex_host_id_scan_type_id` (`apex_host_id` ASC, `scan_type_id` ASC),
  CONSTRAINT `fk_allocation_apex_host_id`
    FOREIGN KEY (`apex_host_id`)
    REFERENCES `salix`.`apex_host` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_allocation_scan_type_id`
    FOREIGN KEY (`scan_type_id`)
    REFERENCES `salix`.`scan_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `salix` ;

-- -----------------------------------------------------
-- procedure update_apex_deployment_code_summary
-- -----------------------------------------------------

USE `salix`;
DROP procedure IF EXISTS `salix`.`update_apex_deployment_code_summary`;

DELIMITER $$
USE `salix`$$
CREATE PROCEDURE `update_apex_deployment_code_summary` (IN proc_apex_deployment_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO apex_deployment_code_summary( apex_deployment_id, summary )
  SELECT apex_deployment.id, GROUP_CONCAT( code_type.code ORDER BY code_type.code SEPARATOR ', ' )
  FROM apex_deployment
  LEFT JOIN code ON apex_deployment.id = code.apex_deployment_id
  LEFT JOIN code_type ON code.code_type_id = code_type.id
  WHERE apex_deployment.id = proc_apex_deployment_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_apex_baseline_first_apex_exam
-- -----------------------------------------------------

USE `salix`;
DROP procedure IF EXISTS `salix`.`update_apex_baseline_first_apex_exam`;

DELIMITER $$
USE `salix`$$
CREATE PROCEDURE update_apex_baseline_first_apex_exam(IN proc_apex_baseline_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO apex_baseline_first_apex_exam( apex_baseline_id, apex_exam_id )
  SELECT apex_baseline.id, apex_exam.id
  FROM apex_baseline
  LEFT JOIN apex_exam ON apex_baseline.id = apex_exam.apex_baseline_id
  AND apex_exam.barcode <=> (
    SELECT MIN( barcode )
    FROM apex_exam
    WHERE apex_baseline.id = apex_exam.apex_baseline_id
    GROUP BY apex_exam.apex_baseline_id
    LIMIT 1
  )
  WHERE apex_baseline.id = proc_apex_baseline_id;
END$$

DELIMITER ;
USE `salix`;

DELIMITER $$

USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_host_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_host_BEFORE_INSERT` BEFORE INSERT ON `apex_host` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_baseline_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_baseline_BEFORE_INSERT` BEFORE INSERT ON `apex_baseline` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_baseline_AFTER_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_baseline_AFTER_INSERT` AFTER INSERT ON `apex_baseline` FOR EACH ROW
BEGIN
  CALL update_apex_baseline_first_apex_exam( NEW.id );
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`serial_number_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`serial_number_BEFORE_INSERT` BEFORE INSERT ON `serial_number` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END
$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_exam_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_exam_BEFORE_INSERT` BEFORE INSERT ON `apex_exam` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_exam_AFTER_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_exam_AFTER_INSERT` AFTER INSERT ON `apex_exam` FOR EACH ROW
BEGIN
  CALL update_apex_baseline_first_apex_exam( NEW.apex_baseline_id );
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_exam_AFTER_UPDATE` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_exam_AFTER_UPDATE` AFTER UPDATE ON `apex_exam` FOR EACH ROW
BEGIN
  CALL update_apex_baseline_first_apex_exam( NEW.apex_baseline_id );
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_exam_AFTER_DELETE` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_exam_AFTER_DELETE` AFTER DELETE ON `apex_exam` FOR EACH ROW
BEGIN
  CALL update_apex_baseline_first_apex_exam( OLD.apex_baseline_id );
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`scan_type_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`scan_type_BEFORE_INSERT` BEFORE INSERT ON `scan_type` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END
$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_scan_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_scan_BEFORE_INSERT` BEFORE INSERT ON `apex_scan` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`code_type_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`code_type_BEFORE_INSERT` BEFORE INSERT ON `code_type` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`scan_type_has_code_type_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`scan_type_has_code_type_BEFORE_INSERT` BEFORE INSERT ON `scan_type_has_code_type` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END
$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_deployment_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_deployment_BEFORE_INSERT` BEFORE INSERT ON `apex_deployment` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`apex_deployment_AFTER_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`apex_deployment_AFTER_INSERT` AFTER INSERT ON `apex_deployment` FOR EACH ROW
BEGIN
  CALL update_apex_deployment_code_summary( NEW.id );
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`code_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`code_BEFORE_INSERT` BEFORE INSERT ON `code` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END
$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`code_AFTER_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`code_AFTER_INSERT` AFTER INSERT ON `code` FOR EACH ROW
BEGIN
  CALL update_apex_deployment_code_summary( NEW.apex_deployment_id );
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`code_AFTER_UPDATE` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`code_AFTER_UPDATE` AFTER UPDATE ON `code` FOR EACH ROW
BEGIN
  CALL update_apex_deployment_code_summary( NEW.apex_deployment_id );
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`code_AFTER_DELETE` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`code_AFTER_DELETE` AFTER DELETE ON `code` FOR EACH ROW
BEGIN
  CALL update_apex_deployment_code_summary( OLD.apex_deployment_id );
END$$


USE `salix`$$
DROP TRIGGER IF EXISTS `salix`.`allocation_BEFORE_INSERT` $$
USE `salix`$$
CREATE DEFINER = CURRENT_USER TRIGGER `salix`.`allocation_BEFORE_INSERT` BEFORE INSERT ON `allocation` FOR EACH ROW
BEGIN
SET NEW.create_timestamp = NOW();
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
