#!/usr/bin/php
<?php
/**
 * receive_exports.php
 *
 * This script scans the e:/OutGoing/* directory on the off-line APEX hosts
 * to recover exported dicom file names and to update the Salix apex_deployment
 * table: status, export_datetime and export_filename columns
 *
 *
 * @author Dean Inglis <inglisd@mcmaster.ca>
 */

chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial( true );
$settings = $initial->get_settings();

define( 'DB_SERVER', $settings['db']['server'] );
define( 'DB_PREFIX', $settings['db']['database_prefix'] );
define( 'DB_USERNAME', $settings['db']['username'] );
define( 'DB_PASSWORD', $settings['db']['password'] );

define( 'USER', $settings['utility']['username'] );
define( 'APEX_SSH_KEY', $settings['apex']['apex_ssh_key'] );

// a lite mysqli wrapper
require_once( $settings['path']['PHP_UTIL'].'/database.class.php' );

// function for writing to the log
function write_log( $message )
{
  file_put_contents(
    LOG_FILE_PATH,
    sprintf( "%s  [cron] <%s> %s\n\n", date( 'Y-m-d (D) H:i:s' ), USER, $message ),
    FILE_APPEND
  );
}

// ssh args: Apex host address, command arg
//
function ssh_command( $address, $arg )
{
  return trim( shell_exec( sprintf(
    'ssh -i ' . APEX_SSH_KEY . ' clsa@%s %s', $address, $arg ) ) );
}

/*-------------MAIN PROGRAM-----------*/

// Connect to Salix db
//
$db_salix = null;
try
{
  $db_salix = new database(
    DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_PREFIX . 'salix' );
}
catch( Exception $e )
{
  write_log( $e->getMessage() );
  return 0;
}

// Restrict the number of exports to process per host during the daily cron
//
$export_limit = 100;
if( 2 == $argc )
{
  $export_limit = $argv[1];
}

// Get the Apex host data from the apex_host table
//
$sql = 'SELECT * FROM apex_host';
$host_list = $db_salix->get_all( $sql );

$process_list = array(
  'name' => array(),
  'num_export' => array(),
  );

// Loop over Apex hosts
//
foreach( $host_list as $host_item )
{
  $num_export = 0;
  $apex_host_id = $host_item['id'];
  $host_address = $host_item['host'];

  // Construct sql query to determine the expected file names
  // on the target host.  File paths on the host are organized by scan type and
  // side if applicable.  Files are exported manually from Apex to the host
  // Conquest dicom outgoing server and stored by type and then primary patient
  // identifier.
  // A left hip scan for participant with baseline barcode 12345678:
  // E:\OutGoing\hip\left\12345678\12345678_YYYYMMDD_HIP_L.dcm
  //
  // where YYYYMMDD is the date of the actual scan.  Followup scans are exported
  // to the same folder with the same participant baseline barcode but the date
  // element of the file name will be that of the actual followup scan date.
  //
  // A whole body scan for the same participant:
  // E:\OutGoing\wbody\12345678\12345678_YYYYMMDD_BCA.dcm
  // E:\OutGoing\wbody\12345678\12345678_YYYYMMDD_BMD.dcm
  //
  // The export consistes of 2 dicom files: a body composition analysis (BCA) report file
  // and the standard bone density image (BMD).  Note that all of the information required
  // to restore the whole body exam within Apex is contained in the BMD dicom file.
  // The BCA dicom file is primarily for recovering the jpeg report image for body composition.
  //
  // NOTE: the query accounts for hip and whole body scan exports only since
  // these scan types are the only ones approved for release to participants
  // and data applicants upon request.  Adjust the WHERE constraint on scan type accordingly
  // if other exported files are to be recovered using this process.
  //
  $sql = sprintf(
    'SELECT DISTINCT '.
    'IF( side="none", '.
    '  CONCAT_WS( "/", "/cygdrive/e/OutGoing", type ), '.
    '  CONCAT_WS( "/", "/cygdrive/e/OutGoing", type, side ) ) AS path '.
    'FROM apex_deployment d '.
    'JOIN apex_host h ON h.id=d.apex_host_id '.
    'JOIN apex_scan s ON s.id=d.apex_scan_id '.
    'JOIN apex_exam e ON e.id=s.apex_exam_id '.
    'JOIN serial_number n ON n.id=e.serial_number_id '.
    'JOIN scan_type t ON t.id=s.scan_type_id '.
    'JOIN apex_baseline b ON b.id=e.apex_baseline_id '.
    'JOIN %scenozo.participant p on p.id=b.participant_id '.
    'JOIN ( '.
    '  SELECT '.
    '  b.participant_id, '.
    '  GROUP_CONCAT(barcode ORDER BY barcode ASC) AS barcode_list '.
    '  FROM apex_exam e '.
    '  JOIN apex_baseline b ON b.id=e.apex_baseline_id '.
    '  GROUP BY participant_id '.
    ') AS x ON x.participant_id=b.participant_id '.
    'WHERE status = "completed" '.
    'AND s.invalid=0 '.
    'AND type in ("hip","wbody") '.
    'AND s.scan_datetime IS NOT NULL '.
    'AND h.id=%d '.
    'ORDER BY priority DESC', DB_PREFIX, $apex_host_id );

  $path_list = $db_salix->get_all( $sql );
  if( false === $path_list || !is_array( $path_list ) ||
    0 == count( $path_list ) )
  {
    continue;
  }

  // Loop over the list of file paths
  //
  $path_keys = array();
  $file_keys = array();
  foreach($path_list as $path)
  {
    // For the current path, construct a linux ls command to run on the host
    // under cygwin and recover all the available file names
    //
    $current_path = $path['path'];
    $cmd = sprintf('ls -R %s | awk ', $current_path );
    $cmd .= '\'/:$/&&f{s=$0;f=0} /:$/&&!f{sub(/:$/,"");s=$0;f=1;next} NF&&f{ print s"/"$0 }\'';
    $res = ssh_command( $host_address, $cmd );
    if('' != $res)
    {
      $res = explode(PHP_EOL, $res);
      foreach($res as $item)
      {
        if(false!==strpos($item, $current_path))
        {
          if(false===strpos($item,'.dcm'))
            $path_keys[] = $item;
          else
            $file_keys[] = $item;
        }
      }
    }
  }

  if(0 == count($path_keys) || 0 == count($file_keys)) continue;

  // Construct sql query to build a list of file names corresponding
  // to the expected scans that have been re-analyzed and exported from Apex on the host
  //
  $sql = sprintf(
    'SELECT '.
    'IF( side="none", '.
    '  CONCAT_WS( "/", "/cygdrive/e/OutGoing", type ), '.
    '  CONCAT_WS( "/", "/cygdrive/e/OutGoing", type, side ) ) AS path, '.
    'barcode_list,  '.
    'DATE_FORMAT(scan_datetime, "%%Y%%m%%d") as scan_date , '.
    'serial_number_id as serial_number, '.
    'CASE '.
    '  WHEN side="left" THEN "L" '.
    '  WHEN side="right" THEN "R" '.
    '  ELSE "NA" '.
    'END AS side_code, '.
    'CASE  '.
    '  WHEN type="forearm" THEN "ARM" '.
    '  WHEN type="hip" THEN "HIP" '.
    '  WHEN type="spine" THEN "LSPINE" '.
    '  WHEN type="lateral" THEN "LSPINE" '.
    '  WHEN type="wbody" THEN "BMD" '.
    '  ELSE "NA" '.
    'END AS body_part, '.
    'd.id AS deployment_id, '.
    'priority '.
    'FROM apex_deployment d '.
    'JOIN apex_host h ON h.id=d.apex_host_id '.
    'JOIN apex_scan s ON s.id=d.apex_scan_id '.
    'JOIN apex_exam e ON e.id=s.apex_exam_id '.
    'JOIN serial_number n ON n.id=e.serial_number_id '.
    'JOIN scan_type t ON t.id=s.scan_type_id '.
    'JOIN apex_baseline b ON b.id=e.apex_baseline_id '.
    'JOIN %scenozo.participant p on p.id=b.participant_id '.
    'JOIN ( '.
    '  SELECT '.
    '  b.participant_id, '.
    '  GROUP_CONCAT(barcode ORDER BY barcode ASC) AS barcode_list '.
    '  FROM apex_exam e '.
    '  JOIN apex_baseline b ON b.id=e.apex_baseline_id '.
    '  GROUP BY participant_id '.
    ') AS x ON x.participant_id=b.participant_id '.
    'WHERE status = "completed" '.
    'AND s.invalid=0 '.
    'AND type in ("hip","wbody") '.
    'AND s.scan_datetime IS NOT NULL '.
    'AND h.id=%d '.
    'ORDER BY priority DESC', DB_PREFIX, $apex_host_id );

  $scan_list = $db_salix->get_all( $sql );
  if( false === $scan_list || !is_array( $scan_list ) ||
    0 == count( $scan_list ) )
  {
    continue;
  }

  // Loop over the expected dicom files
  //
  $export_data = array();
  foreach( $scan_list as $item )
  {
    $path = $item['path'] . '/';
    $barcode_list = explode(',',$item['barcode_list']);
    $body_part = $item['body_part'];
    $scan_date = $item['scan_date'];
    $serial_number = $item['serial_number'];
    $side = $item['side_code'];

    $filename_stub = array('STUB',$scan_date,$serial_number);
    if('NA' != $body_part) $filename_stub[] = $body_part;
    if('NA' != $side) $filename_stub[] = $side;
    $filename_stub = implode('_', $filename_stub) . '.dcm';

    foreach($barcode_list as $folder_barcode)
    {
      $folder_path = $path . $folder_barcode;

      // if the folder doesnt exist move on
      //
      if(!in_array($folder_path,$path_keys)) continue;

      $folder_path .= '/';
      foreach($barcode_list as $file_barcode)
      {
        $filename = $folder_path . str_replace('STUB', $file_barcode, $filename_stub);

        if(!in_array($filename,$file_keys)) continue;

        // if a valid file, get the create timestamp
        //
        $cmd = sprintf(
          'ls -l -tr --time-style="long-iso" -d -1 %s 2>/dev/null | '.
          "grep -E '\/[1-9]{1}[0-9]{7}\/' | ".
          "awk '{print $6" . '" "$7" "$8}'. "'", $filename );

        $res = ssh_command( $host_address, $cmd );

        if('' != $res )
        {
          $parts = explode(' ', $res);
          if(3 == count($parts))
          {
            $export_data[] = array(
              'file' => $filename,
              'date' => sprintf('%s %s:00', $parts[0], $parts[1]),
              'deployment_id' => $item['deployment_id']);
            $num_export++;
            break 2;
          }
        }
      }
    }
    if( $num_export >= $export_limit ) break;
  } // end current uid list

  // Update the apex_deployment table with information pertaining to the exported files.
  //
  // NOTE: once scans have been exported, they can be recovered by scp or other means
  // of retrieval for satisfying priority scan requests.  See process_requests script for example.
  // Exported scans can be deleted on off-line Apex hosts as needed and re-exported at a later date
  // from Apex without necessarily updating the apex_deployment table.  The files are named
  // consistently by configuration settings within the outgoing host Conquest dicom server.
  //
  foreach( $export_data as $item )
  {
    $sql = sprintf(
      'UPDATE apex_deployment SET '.
      'status="exported", '.
      'export_datetime="%s", '.
      'export_filename="%s" '.
      'WHERE id=%d', $item['date'], $item['file'], $item['deployment_id'] );
    if( false === $db_salix->execute( $sql ) )
    {
      write_log('ERROR: failed to update deployment record');
      write_log($sql);
    }
  }

  $process_list['name'][] = $host_item['name'];
  $process_list['num_export'][] = $num_export;
}

write_log( sprintf( 'hosts [%s] exports [%s]',
  implode( '/', $process_list['name'] ),
  implode( '/', $process_list['num_export'] ) ) );

write_log( 'receive_exports done!' );

return 1;
