#!/usr/bin/php
<?php
/**
 * merge_biographies.php
 *
 * This script merges participant follow-up with baseline biographies
 * for re-analysis in Apex on APEX off-line hosts.
 *
 * Due to participant confidentiality constraints, participant
 * identifying information, such as first and last name, cannot be
 * used as identifiers in Apex software.  The 'baseline' interview
 * barcode at the time of the DXA exam is used as the longitudinal
 * identifer in Apex.  Baseline in this context represents the first
 * scan of a particular type, such as hip or wbody.
 *
 * The longitudinal identifer 'IDENTIFIER1' in Apex MS SQL is used
 * as a primary key in tables such as the PatScan and ScanAnalysis tables
 * and corresponds to the 'baseline' interview barcode.  To analyze
 * and track follow-up scans, the IDENTIFIER must be updated after
 * dicom import into Apex to match the baseline scan.  That is, all
 * of a participant's scans of the same type must be kept on the same
 * Apex host and must share one common identifier: the 'baseline'
 * barcode. This script coordinates Salix meta data and enforces
 * coherent identification on the Apex hosts.
 *
 *
 * @author Dean Inglis <inglisd@mcmaster.ca>
 */

chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial( true );
$settings = $initial->get_settings();

define( 'DB_SERVER', $settings['db']['server'] );
define( 'DB_PREFIX', $settings['db']['database_prefix'] );
define( 'DB_USERNAME', $settings['db']['username'] );
define( 'DB_PASSWORD', $settings['db']['password'] );
define( 'USER', $settings['utility']['username'] );
define( 'APEX_SSH_KEY', $settings['apex']['apex_ssh_key'] );

// a lite mysqli wrapper
require_once( $settings['path']['PHP_UTIL'].'/database.class.php' );
require_once( $settings['path']['PHP_UTIL'].'/odbc.class.php' );

// function for writing to the log
function write_log( $message )
{
  file_put_contents(
    LOG_FILE_PATH,
    sprintf( "%s  [cron] <%s> %s\n\n", date( 'Y-m-d (D) H:i:s' ), USER, $message ),
    FILE_APPEND
  );
}

// ssh args: apex host address, command arg
function ssh_command( $address, $arg )
{
  return trim( shell_exec( sprintf(
    'ssh -i ' . APEX_SSH_KEY . ' clsa@%s %s', $address, $arg ) ) );
}

/*-------------MAIN PROGRAM-----------*/

$db_salix = null;
try
{
  $db_salix = new database(
    DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_PREFIX . 'salix' );
}
catch( Exception $e )
{
  write_log( $e->getMessage() );
  return 0;
}

// Auxilliary APEX db tables that have patient_key indices
// Updates to the IDENTIFIER1 column values can affect multiple Apex
// db tables depending on scan type.
//
$aux_host_tables = array(
  'hip' =>
    array( 'HipHSA' ),
  'wbody' =>
    array( 'WbodyComposition', 'SubRegionBone', 'SubRegionComposition',
           'ObesityIndices', 'AndroidGynoidComposition' ) );

// Rank that is considered as baseline for each scan type:
// lumbar spine scans were not started until CLSA follow-up 1
//
$baseline_rank_list = array(
 'forearm' => 1,
 'lateral' => 1,
 'wbody' => 1,
 'hip' => 1,
 'spine' => 2 );

// Get off-line Apex host info
//
$sql = 'SELECT * FROM apex_host';
$host_list = $db_salix->get_all( $sql );
foreach( $host_list as $host_item )
{
  $db_dexa = null;
  try
  {
    $db_dexa = new odbc(
      strtoupper( $host_item['name'] ), $host_item['sql_user'], $host_item['sql_pass'] );
  }
  catch( Exception $e )
  {
    write_log( sprintf( 'ERROR: failed to connect to host %s: %s',
      $host_item['name'], $e->getMessage() ) );
    continue;
  }

  // Determine which deployments have not been merged to a sibling baseline scan
  //
  $apex_host_id = $host_item['id'];
  $host_address = $host_item['host'];
  $sql = sprintf(
    'SELECT '.
    'b.id AS apex_baseline_id, '.
    'type, '.
    'side, '.
    't.id AS scan_type_id, '.
    'GROUP_CONCAT(d.id ORDER BY rank ASC) AS deployment_id_list, '.
    'GROUP_CONCAT(rank ORDER BY rank ASC) AS rank_list, '.
    'GROUP_CONCAT(barcode ORDER BY rank ASC) AS barcode_list, '.
    'GROUP_CONCAT(patient_key ORDER BY rank ASC) AS patient_key_list, '.
    'GROUP_CONCAT(scanid ORDER BY rank ASC) AS scanid_list, '.
    'GROUP_CONCAT(serial_number_id ORDER BY rank ASC) AS serial_number_list '.
    'FROM apex_deployment d '.
    'JOIN apex_host h ON h.id=d.apex_host_id '.
    'JOIN apex_scan s ON s.id=d.apex_scan_id '.
    'JOIN apex_exam e ON e.id=s.apex_exam_id '.
    'JOIN scan_type t ON t.id=s.scan_type_id '.
    'JOIN apex_baseline b ON b.id=e.apex_baseline_id '.
    'WHERE '.
    '('.
      '(merged=0 AND rank>1) '.
      'OR '.
      '(rank=1 AND pass IS NOT NULL AND status IN ("completed","exported"))'.
    ') '.
    'AND invalid=0 '.
    'AND scanid IS NOT NULL '.
    'AND patient_key IS NOT NULL '.
    'AND scan_datetime IS NOT NULL '.
    'AND h.id=%d '.
    'GROUP BY b.id, t.id '.
    'HAVING COUNT(rank)>1 '.
    'ORDER BY type, side', $apex_host_id );

  // Update the APEX db auxialliary patient_keys eg., hip => HSA
  //
  $merge_list = $db_salix->get_all( $sql );
  if( false === $merge_list || !is_array( $merge_list ) ||
    0 == count( $merge_list ) )
  {
    write_log( sprintf( 'No merge candidates on host %s', $host_item['name'] ) );
    continue;
  }

  // Store the post-merge patient_key removals
  //
  $remove_list = array();

  // Update deployment merge status
  //
  $update_deployment_list = array();

  // Loop over each merge candidate row
  //
  foreach( $merge_list as $merge_item )
  {
    $type = $merge_item['type'];
    $side = $merge_item['side'];
    $rank_list = explode( ',' , $merge_item['rank_list'] );
    if( $baseline_rank_list[$type] != min( $rank_list ) )
    {
      // Verify that the lowest ranked scan of this type for this patient_key is unavailable
      // regardless of Salix invalid status since in future it may be recovered from a DCS
      // archive
      //
      $verify_sql = sprintf(
        'select min(rank) '.
        'from apex_scan s '.
        'join scan_type t on t.id=s.scan_type_id '.
        'join apex_exam e on e.id=s.apex_exam_id '.
        'join apex_baseline b on b.id=e.apex_baseline_id '.
        'join %scenozo.participant p on p.id=b.participant_id '.
        'where type="%s" '.
        'and (availability=1 or invalid=0) '.
        'and side="%s" '.
        'and apex_baseline_id=%d '.
        'group by uid',
         DB_PREFIX, $type, $side, $merge_item['apex_baseline_id']);

      $lowest_rank = $db_salix->get_one($verify_sql);
      if($lowest_rank < min( $rank_list ) )
      {
        // Find pending deployments on this host with a rank lower than their sibilings
        //
        $verify_sql = sprintf(
          'select h.name, barcode, status '.
          'from apex_scan s '.
          'join scan_type t on t.id=s.scan_type_id '.
          'join apex_exam e on e.id=s.apex_exam_id '.
          'join apex_baseline b on b.id=e.apex_baseline_id '.
          'join apex_deployment d on s.id=d.apex_scan_id '.
          'join apex_host h on h.id=d.apex_host_id '.
          'join %scenozo.participant p on p.id=b.participant_id '.
          'where type="%s" '.
          'and invalid=0 '.
          'and side="%s" '.
          'and apex_baseline_id=%d '.
          'and rank=%d',
           DB_PREFIX, $type, $side, $merge_item['apex_baseline_id'], $lowest_rank);
        $res = $db_salix->get_row($verify_sql);
        if(false !== $res && is_array($res) && $res['status']=='pending')
        {
          write_log( sprintf( 'WARNING: %s pending sibling %s (%s (side: %s) delaying merge barcodes: %s)',
            $res['name'], $res['barcode'], $type, $side, $merge_item['barcode_list'] ) );
        }
        else
          write_log( sprintf( 'WARNING: incomplete rank list (%s (side: %s) barcodes: %s)',
            $type, $side, $merge_item['barcode_list'] ) );

        continue;
      }
    }

    $scan_type_id = $merge_item['scan_type_id'];

    // Find APEX db tables containing the patient_key
    //
    $host_tables = array( ucfirst( $type ) );
    if( array_key_exists( $type, $aux_host_tables ) )
      $host_tables = array_merge( $host_tables, $aux_host_tables[$type] );

    $deployment_id_list = explode( ',' , $merge_item['deployment_id_list'] );
    $barcode_list = explode( ',' , $merge_item['barcode_list'] );
    $patient_key_list = explode( ',', $merge_item['patient_key_list'] );
    $scanid_list = explode( ',', $merge_item['scanid_list'] );
    $serial_number_list = explode( ',', $merge_item['serial_number_list'] );

    // Update the Apex ScanAnalysis table records to reference the baseline patient_key
    // then update any auxiliary tables holding analysis results to also
    // reference the baseline patient_key.
    //
    // If there are no further references to the follow-up patient_key
    // we delete the corresponding record from the PATIENT table
    //
    $base_deployment_id = array_shift($deployment_id_list);
    $base_barcode = array_shift($barcode_list);
    $base_scanid = array_shift($scanid_list);
    $base_serial_number = array_shift($serial_number_list);
    $base_patient_key = array_shift($patient_key_list);

    $current_remove_list = array();
    $current_deployment_list= array();

    // Loop over the remaining scans that came after the first (lowest) ranked scan
    //
    $barcode = current($barcode_list);
    $serial_number = current($serial_number_list);
    $scanid = current($scanid_list);
    $patient_key = current($patient_key_list);
    $deployment_id = current($deployment_id_list);
    while( false !== $barcode &&
           false !== $serial_number &&
           false !== $scanid &&
           false !== $patient_key &&
           false !== $deployment_id )
    {
      // Formulate the MS SQL statements that perform the merge.
      //
      // Update the APEX ScanAnalysis table so that the scan references the baseline patient_key
      //
      $sql = sprintf(
        'UPDATE s '.
        "SET PATIENT_KEY='%s' ".
        'FROM PatScan.dbo.ScanAnalysis s '.
        'JOIN PatScan.dbo.PATIENT p ON p.PATIENT_KEY=s.PATIENT_KEY '.
        "WHERE p.IDENTIFIER1='%s' ".
        'AND s.SCAN_TYPE=%d '.
        "AND s.SERIAL_NUMBER='%s' ".
        "AND s.SCANID='%s';", $base_patient_key,
        $barcode, $scan_type_id, $serial_number, $scanid );

      // Update the APEX analysis results table(s) so that the scan references the baseline patient_key
      //
      foreach( $host_tables as $table )
      {
        $sql .= sprintf(
          'UPDATE t '.
          "SET PATIENT_KEY='%s' ".
          'FROM PatScan.dbo.%s t '.
          'JOIN PatScan.dbo.PATIENT p ON p.PATIENT_KEY=t.PATIENT_KEY '.
          "WHERE p.IDENTIFIER1='%s' ".
          "AND t.SERIAL_NUMBER='%s' ".
          "AND t.SCANID='%s';", $base_patient_key, $table,
          $barcode, $serial_number, $scanid );
      }

      if( false === $db_dexa->execute( $sql ) )
      {
        write_log( sprintf( 'ERROR: failed merge into patient_key %s on host %s',
          $base_patient_key, $host_item['name'] ) );
        write_log( $sql );
      }
      else
      {
        // List of patient_keys that may need to be removed
        //
        $current_remove_list[] = $patient_key;

        // List of deployments that will have merged column set to 1
        //
        $current_deployment_list[] = $deployment_id;
      }
      $barcode = next($barcode_list);
      $serial_number = next($serial_number_list);
      $scanid = next($scanid_list);
      $patient_key = next($patient_key_list);
      $deployment_id = next($deployment_id_list);
    } // end patient_key list

    if( 0 < count( $current_remove_list ) )
    {
      $current_deployment_list[] = $base_deployment_id;
      if( !array_key_exists( $type, $remove_list ) )
      {
        $remove_list[$type] = array();
      }

      // Global list of candidate patient_keys for removal
      //
      $remove_list[$type] = array_merge( $remove_list[$type], $current_remove_list );

      // Global list of deployments to have merged column set to 1
      //
      $update_deployment_list = array_merge( $update_deployment_list, $current_deployment_list );
    }
  }// end host merge list

  // Loop over the post baseline patient_keys that were merged by scan type
  //
  foreach( $remove_list as $type => $item_list )
  {
    if( 0 == count( $item_list ) ) continue;

    $item_list = array_unique( $item_list );

    $host_tables = array( ucfirst( $type ) );
    if( array_key_exists( $type, $aux_host_tables ) )
      $host_tables = array_merge( $host_tables, $aux_host_tables[$type] );

    // Get all the table names other than the ones having keys being merged
    //
    $str = "'". implode( "','", $host_tables ) . "'";
    $sql = sprintf(
      'SELECT '.
      't.name '.
      'FROM PatScan.sys.columns c '.
      'JOIN PatScan.sys.tables t ON c.object_id=t.object_id '.
      "WHERE c.name IN ('PATIENT_KEY', 'SCANID', 'SERIAL_NUMBER' ) ".
      "AND t.name NOT IN ('PATIENT', 'QcParam', 'ScanAnalysis', 'Rulers', 'TenYearFxRisk', 'ReferenceResults', %s) ".
      'GROUP BY t.name '.
      'HAVING COUNT(*)=3', $str );

    $table_list = $db_dexa->get_all( $sql );
    array_walk( $table_list, function( &$item ) { $item = $item['name']; } );

    // The next set of MS SQL statements are appended to maintain scope of the temporary table
    //
    $sql =
      'CREATE TABLE #patient_key_totals ( '.
      'PATIENT_KEY NVARCHAR(24) NOT NULL, '.
      'TOTAL INT DEFAULT 0 );';

    $sql .=
      'INSERT into #patient_key_totals (PATIENT_KEY) '.
      'SELECT DISTINCT PATIENT_KEY FROM PatScan.dbo.PATIENT;';

    $sql_pre =
      'UPDATE t1 '.
      'SET t1.TOTAL=t1.TOTAL+1 '.
      'FROM #patient_key_totals AS t1 '.
      'INNER JOIN PatScan.dbo.ScanAnalysis AS s1 '.
      'ON t1.PATIENT_KEY=s1.PATIENT_KEY '.
      'INNER JOIN PatScan.dbo.%s AS t2 '.
      'ON t2.PATIENT_KEY=s1.PATIENT_KEY '.
      'AND t2.SCANID=s1.SCANID '.
      'AND t2.SERIAL_NUMBER=s1.SERIAL_NUMBER;';

    foreach( $table_list as $table )
    {
      $sql .= sprintf( $sql_pre, $table );
    }

    $sql .=
      'SELECT PATIENT_KEY FROM #patient_key_totals WHERE TOTAL>0;';

    $res = $db_dexa->get_all( $sql );

    // Remove keys targeted for deletion that are in use by other scan types
    //
    if( false !== $res && is_array( $res ) && 0 < count( $res ) )
    {
      array_walk( $res, function( &$item ) { $item = $item['PATIENT_KEY']; } );

      // The difference between the patient_keys that were merged and require deletion
      // and the patient_keys in use by other scan types which should NOT be removed
      //
      $item_list = array_diff( $item_list, $res );
    }

    write_log( sprintf( '%s remove %s patient key count: %s',
      $host_item['name'], $type, count( $item_list ) ) );

    // After the merge, the old patient biographies have to me removed
    //
    $num_remove = count( $item_list );
    if( 0 < $num_remove )
    {
      $sql =
       'DELETE FROM '.
       'PatScan.dbo.PATIENT WHERE PATIENT_KEY ';
      if( 1 < $num_remove )
        $sql .= "IN ('". implode( "','", $item_list ) . "')";
      else
        $sql .= "='" . current( $item_list ) . "'";

      if( false === $db_dexa->execute( $sql ) )
      {
        write_log( sprintf( 'ERROR: failed to delete %s patient_key(s)', $type ) );
        write_log( $sql );
      }
    }
  } // end remove patient_keys by type

  // Update the merge status column in the Salix deployment table
  //
  $num_update = count( $update_deployment_list );
  if( 0 < $num_update )
  {
    $sql =
      'UPDATE apex_deployment '.
      'SET merged=1 '.
      'WHERE id ';
    if( 1 < $num_update )
      $sql .= "IN ('". implode( "','", $update_deployment_list ) . "')";
    else
      $sql .= "='" . current( $update_deployment_list ) . "'";

    if( false === $db_salix->execute( $sql ) )
    {
      write_log( sprintf( 'ERROR: failed to update %s merge status', $type ) );
      write_log( $sql );
    }
  }
}

return 1;
