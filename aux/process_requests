#!/usr/bin/php
<?php
/**
 * process_requests.php
 *
 * This script builds redacted jpg reports from dexa hip and wbody scans exported in dicom
 * formate from the off-line Apex hosts.
 * Other scan types that produce embedded jpg reports within dicom files, such as forearm
 * and lumbar spine, scan also be integrated for inclusion in this script.
 * Redacting is required for those participant requested scans that pass quality control
 * of the re-analyis processing.  CLSA redacts identifying participant information and adds
 * a disclaimer to emphasize to recipients that the scan image and its report are intended
 * for research purposed and not for actual clinical evaluations.
 *
 * Scans marked as 'priority' are scp'd off the off-line Apex host if a deployment
 * exists for the scan that has status 'exported', export_filename non-null, pass state 1.
 * The patient ID and dob fields in the report image are redacted and a custom
 * disclaimer box is overlaid near the bottom of the report (using imagemagick API).
 *
 *
 * @author Dean Inglis <inglisd@mcmaster.ca>
 */

chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial( true );
$settings = $initial->get_settings();

define( 'DB_SERVER', $settings['db']['server'] );
define( 'DB_PREFIX', $settings['db']['database_prefix'] );
define( 'DB_USERNAME', $settings['db']['username'] );
define( 'DB_PASSWORD', $settings['db']['password'] );

define( 'IMAGE_PATH', $settings['path']['TEMPORARY_FILES'] );
define( 'USER', $settings['utility']['username'] );
define( 'APEX_SSH_KEY', $settings['apex']['apex_ssh_key'] );
define( 'DXA_REPORT_PATH', $settings['path']['DEPLOYMENT_REPORT'] );

// make sure the image file exists
if( !is_dir( IMAGE_PATH ) ) mkdir( IMAGE_PATH, 0777, true );

// a lite mysqli wrapper
require_once( $settings['path']['PHP_UTIL'].'/database.class.php' );

// function for writing to the log
function write_log( $message )
{
  file_put_contents(
    LOG_FILE_PATH,
    sprintf( "%s  [cron] <%s> %s\n\n", date( 'Y-m-d (D) H:i:s' ), USER, $message ),
    FILE_APPEND
  );
}

// scp args: apex host address, outgoing source file, destination file
function scp_command( $address, $source, $destination )
{
  return trim( shell_exec( sprintf(
    'scp -i ' . APEX_SSH_KEY .
    ' clsa@%s:%s %s', $address, $source, $destination ) ) );
}

// Convenience class to store a 2D rectangle
//
class rectangle {
  function __construct( $x0, $y0, $x1, $y1 )
  {
    $this->x0 = $x0;
    $this->x1 = $x1;
    $this->y0 = $y0;
    $this->y1 = $y1;
  }

  public $x0;
  public $y0;
  public $x1;
  public $y1;
}

// A dexa scan report class to aggregate details and operations needed to redact 
// Apex exported dicom files.
//
class dexa_scan_report {
  function __construct( $uid, $type, $rank, $filename, $apex_deployment_id, $language )
  {
    self::region_list();
    self::label_list();
    self::disclaimer_list();

    $this->uid = $uid;
    $this->apex_deployment_id = $apex_deployment_id;
    $this->type = $type;
    $this->rank = $rank;
    $this->filename = $filename;
    $this->language = $language;
  }

  public function process( $host_address, $temp_path, $save_path )
  {
    // do not re-process if the report image already exists
    //
    $out_file = sprintf( '%s/%d.jpg', $save_path, $this->apex_deployment_id );
    if( file_exists( $out_file ) && 0 < filesize( $out_file ) ) return false;

    // scp the dicom file off the Apex host
    //
    $temp_file = sprintf( '%s/%s', $temp_path, basename( $this->filename ) );

    scp_command( $host_address, $this->filename, $temp_file );
    sleep(5);
    if( !file_exists( $temp_file ) )
	    return false;
    if( 100 > filesize( $temp_file ) )
    {
      unlink( $temp_file );
      return false;
    }

    // Use ImageMagick 'convert' utility to redact scan specific rectangular regions
    // of the jpg report image
    //
    $cmd = sprintf( 'convert %s ', $temp_file );

    // Redact the image Patient ID and DOB fields
    //
    if( array_key_exists( $this->type, static::$region_list ) )
    {
      $cmd .= '-flip -fill "rgb(222,222,222)" ';
      $region_type_list = static::$region_list[$this->type];
      foreach( $region_type_list as $idx => $rectangle )
      {
        $cmd .= sprintf(
          '-draw "rectangle %d,%d,%d,%d" ',
          $rectangle->x0, $rectangle->y0, $rectangle->x1, $rectangle->y1 );
      }

      // Generate a unique disclaimer label with a white background and red frame
      //
      $cmd .= '-flip ';
      if( array_key_exists( $this->type, static::$label_list ) )
      {
        $rectangle = static::$label_list[$this->type];
        $cmd .= sprintf(
          '-fill red -draw "rectangle %d,%d,%d,%d" ',
          $rectangle->x0-4,$rectangle->y0-4,
          $rectangle->x1+2,$rectangle->y1+2 );

        $cmd .= sprintf(
          '-fill white -draw "rectangle %d,%d,%d,%d" ',
          $rectangle->x0-2,$rectangle->y0-2,
          $rectangle->x1,$rectangle->y1 );

	// Get the disclaimer in the participant's preferred language
	//
        $caption = sprintf( static::$disclaimer_list[$this->language], $this->uid );
        $cmd .= sprintf(
          '\( -background white -fill red -font Helvetica-Bold '.
          '-pointsize 25 -size %dx%d -interline-spacing 7 -gravity NorthWest caption:"%s" \) ',
          $rectangle->x1-$rectangle->x0+1,
          $rectangle->y1-$rectangle->y0+1,
	  $caption );

	// Add the disclaimer in the scan specific location
	//
        $cmd .= sprintf( '-compose Over -geometry +%d+%d -composite ',
          $rectangle->x0, $rectangle->y0 );
      }
    }

    // Execute the ImageMagick command
    //
    $cmd .= sprintf( '%s', $out_file );
    $res = shell_exec( $cmd );
    unlink( $temp_file );
    return true;
  }

  public static $region_list = null;
  public static $label_list = null;
  public static $disclaimer_list = null;

  // The disclaimers in english or french depending on the participants preferred language
  //
  public static function disclaimer_list()
  {
    if( null === self::$disclaimer_list )
    {
      self::$disclaimer_list = array(
        'en' => 'These tests were conducted for research purposes only; '.
                'these results should not be used as the basis for '.
                'clinical diagnosis or treatment.\nThese results have '.
                'been released to Participant %s at their request.',
        'fr' => 'Les mesures effectuées au Site de collecte de données ne sont utilisées qu’à des fins de recherche.  '.
                "Les résultats qui en découlent n'ont pas de valeur diagnostique ou thérapeutique.  ".
                'Les résultats ont été envoyés au participant %s à sa demande.' );
    }
  }

  // Label locations depend on scan type.
  // Lumber spine and other scans types can be added here.
  //
  public static function label_list()
  {
    if( null === self::$label_list )
    {
      self::$label_list = array(
        'forearm'=> new rectangle(62,1261,1138,1375),
        'hip' => new rectangle(62,1671,1138,1785),
        'wbody' => new rectangle(62,1195,426,1504) );
    }
  }

  // Redaction locations depend on scan type.
  // Lumber spine and other scans types can be added here.
  //
  public static function region_list()
  {
    if( null === self::$region_list )
    {
      self::$region_list = array(
        'forearm' => array(
          new rectangle(170,1204,248,1178),
          new rectangle(170,973,248,948) ),
        'hip' => array(
          new rectangle(170,1614,248,1589),
          new rectangle(170,1383,248,1358) ),
        'wbody' => array(
          new rectangle(170,1545,248,1520),
          new rectangle(170,1314,248,1289) ) );
    }
  }

  public $uid;
  public $type;
  public $filename;
  public $apex_deployment_id;
  public $language;
}

/*-------------MAIN PROGRAM-----------*/

$db_salix = null;
try
{
  $db_salix = new database(
    DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_PREFIX . 'salix' );
}
catch( Exception $e )
{
  write_log( $e->getMessage() );
  return 0;
}

// This script can be used to re-reprocess a single scan based on the 
// corresponding Salix apex_deployment record.
//
$deployment_id = null;
if( 2 == $argc )
{
  $deployment_id = ctype_digit( $argv[1] ) ? $argv[1] : null;
  if( null === $deployment_id )
    return 0;
  $file_name = sprintf( '%s/%s.jpg', DXA_REPORT_PATH, $deployment_id );
  if( file_exists( $file_name ) )
    unlink( $file_name );
  else
    return 0;
}

// Single deployment refresh.  Currently only hip and wbody scans are
// provided to participants on request.  Update accordingly for other scan types.
//
if( null !== $deployment_id )
{
  $sql = sprintf(
    'SELECT '.
    'type, '.
    'rank, '.
    'uid, '.
    'export_filename, '.
    'h.host, '.
    'l.code '.
    'FROM apex_deployment d '.
    'JOIN apex_host h ON h.id=d.apex_host_id '.
    'JOIN apex_scan s ON s.id=d.apex_scan_id '.
    'JOIN scan_type t ON t.id=s.scan_type_id '.
    'JOIN apex_exam e ON e.id=s.apex_exam_id '.
    'JOIN apex_baseline b ON b.id=e.apex_baseline_id '.
    'JOIN %scenozo.participant p ON p.id=b.participant_id '.
    'JOIN %scenozo.language l ON l.id=p.language_id '.
    'WHERE invalid=0 '.
    'AND t.type in ("hip","wbody") '.
    'AND export_filename IS NOT NULL '.
    'AND pass=1 '.
    'AND status="exported" '.
    'AND priority=1 '.
    'AND d.id=%d',
    DB_PREFIX, DB_PREFIX, $deployment_id );

  $res = $db_salix->get_row( $sql );
  if( false === $res || !is_array( $res ) )
    return 0;

  // Create the class instance
  //
  $scan_item = new dexa_scan_report(
    $res['uid'],
    $res['type'],
    $res['rank'],
    $res['export_filename'],
    $deployment_id,
    $res['code'] );
  $res = $scan_item->process( $res['host'], IMAGE_PATH, DXA_REPORT_PATH );

  write_log( sprintf( '%s refresh %s report image %d',
    ( false === $res ? 'WARNING: failed' : 'successful' ), $scan_item->type, $deployment_id ) );

  return false === $res ? 0 : 1;
}

// New deployment creation.
// Get the list of off-line Apex hosts
//
$sql = 'SELECT * FROM apex_host';
$host_list = $db_salix->get_all( $sql );
$process_list = array();
foreach( $host_list as $host_item )
{
  $num_processed = 0;
  $apex_host_id = $host_item['id'];
  $host_address = $host_item['host'];

  // Get all the priority scans that have passed quality control and
  // have been exported as dicom files from the off-line Apex host
  //
  $sql = sprintf(
    'SELECT d.id AS apex_deployment_id, '.
    'type, '.
    'rank, '.
    'barcode, '.
    'uid, '.
    'l.code, '.
    'export_filename '.
    'FROM apex_deployment d '.
    'JOIN apex_host h ON h.id=d.apex_host_id '.
    'JOIN apex_scan s ON s.id=d.apex_scan_id '.
    'JOIN scan_type t ON t.id=s.scan_type_id '.
    'JOIN apex_exam e ON e.id=s.apex_exam_id '.
    'JOIN apex_baseline b ON b.id=e.apex_baseline_id '.
    'JOIN %scenozo.participant p ON p.id=b.participant_id '.
    'JOIN %scenozo.language l ON l.id=p.language_id '.
    'WHERE invalid=0 '.
    'AND export_filename IS NOT NULL '.
    'AND type in ("hip","wbody") '.
    'AND pass=1 '.
    'AND status="exported" '.
    'AND priority=1 '.
    'AND h.id=%d '.
    'ORDER BY uid', DB_PREFIX, DB_PREFIX, $apex_host_id );

  $file_list = $db_salix->get_all( $sql );
  if( false === $file_list || !is_array( $file_list ) ||
    0 == count( $file_list ) ) continue;

  // Create the instances of the dexa_scan_report class
  //
  $report_list = array();
  foreach( $file_list as $file_item )
  {
    $type = $file_item['type'];
    $report_list[$type][] = new dexa_scan_report(
      $file_item['uid'],
      $type,
      $file_item['rank'],
      $file_item['export_filename'],
      $file_item['apex_deployment_id'],
      $file_item['code'] );
  }

  // Loop over the instances, each one self-processing
  //
  foreach( $report_list as $type=>$item_list)
  {
    foreach( $item_list as $item)
    {
      $res = $item->process( $host_item['host'], IMAGE_PATH, DXA_REPORT_PATH );
      if( false !== $res ) $num_processed++;
    }
  }
  if( 0 < $num_processed )
  {
    $process_list[$host_item['name']] = $num_processed;
  }
}

// Log the basic stats of the script run
//
if( 0 < count( array_keys( $process_list ) ) )
{
  write_log( sprintf( 'hosts [%s] priority scan requests [%s]',
    implode( '/', array_values( $process_list ) ),
    implode( '/', array_keys( $process_list ) ) ) );
}

write_log( 'process_requests done!' );

return 1;
