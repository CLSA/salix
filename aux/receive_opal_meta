#!/usr/bin/php
<?php
/**
 * receive_opal_meta.php
 *
 * This script downloads participant meta data for the apex_exam and
 * apex_scan db tables from Opal.
 * The Opal meta_* views must have an Entities Filter script set, for example:
 * $lastupdate().after(newValue('2017-11-05', 'date'))
 *
 * @author Dean Inglis <inglisd@mcmaster.ca>
 */

chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial( true );
$settings = $initial->get_settings();

define( 'OPAL_SERVER', $settings['opal']['server'] );
define( 'OPAL_PORT', $settings['opal']['port'] );
define( 'OPAL_USERNAME', $settings['opal']['username']  );
define( 'OPAL_PASSWORD', $settings['opal']['password'] );

define( 'DB_SERVER', $settings['db']['server'] );
define( 'DB_PREFIX', $settings['db']['database_prefix'] );
define( 'DB_USERNAME', $settings['db']['username'] );
define( 'DB_PASSWORD', $settings['db']['password'] );

// see the readme in /aux/opal_views for further documentation
// on the use of json templates for Salix related Opal views
//
define( 'JSON_VIEW_PATH', $settings['path']['APPLICATION'].'/aux/opal_views/json' );

define( 'USER', $settings['utility']['username'] );

// a lite mysqli wrapper
require_once( $settings['path']['PHP_UTIL'].'/database.class.php' );
// a lite curl wrapper
require_once( $settings['path']['PHP_UTIL'].'/opalcurl.class.php' );

// function for writing to the log
function write_log( $message )
{
  file_put_contents(
    LOG_FILE_PATH,
    sprintf( "%s  [cron] <%s> %s\n\n", date( 'Y-m-d (D) H:i:s' ), USER, $message ),
    FILE_APPEND
  );
}

/*-------------MAIN PROGRAM-----------*/

// Collect meta data from Opal for study waves that have been completed
// or that are in progress.  A 3 week window from the current date is imposed to allow for
// delayed interview exports from DCSs.
//
$last_completed_rank = 2;  // consider making a setting in the application ini file
$rank = $last_completed_rank;
$date = null;
if( 2 == $argc )
{
  $rank = $argv[1];
}
else if( 3 == $argc )
{
  $rank = $argv[1];
  $date = $argv[2];
}
else
{
  write_log( 'incorrect arguments: ' . implode( ',', $argv ) );
  return 0;
}

// Define the view by requested rank
//
$meta_view = 'meta_' . $rank;

// Connect to Opal via curl
//
$opal_curl = new opalcurl(
  OPAL_SERVER,
  OPAL_PORT,
  OPAL_USERNAME,
  OPAL_PASSWORD,
  'salix',
  $meta_view,
  JSON_VIEW_PATH
);

if( $last_completed_rank < $rank )
{
  if( null === $date )
  {
    // Use date from 3 weeks ago to allow
    // for delayed interview exports to Opal
    //
    $date_obj = new DateTime();
    $date_obj->sub( new DateInterval( 'P6Y' ) );
    $date = $date_obj->format( 'Y-m-d' );
  }
  // set flag to true if updating the opal view entity filtering is needed
  // this will activate the above date window to limit interview meta data
  // to those after the specified date.  Currently set to 6 years 'P6Y' to capture
  // all wave 3 interviews.
  //
  $do_entity_filter = false;

  if ($do_entity_filter) $opal_curl->set_date( $date );
}

// Get the UID list from the meta data view
//
$identifier_list = $opal_curl->get_identifiers();

// Get the meta data in the view
//
$list = $opal_curl->get_complete_list();
$total = count( $list );

// Sanity check that the number of UIDs aligns with the rows of meta data
//
if( $total != count( $identifier_list ) )
{
  write_log( 'identifier list incomplete' );
  return 0;
}

// Connect to Salix db
//
$db_salix = null;
try
{
  $db_salix = new database( DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_PREFIX . 'salix' );
}
catch( Exception $e )
{
  write_log( $e->getMessage() );
  return 0;
}

// Prepare a template insert sql statement to create new apex_exam records
//
$columns = array(
  'apex_baseline_id',
  'serial_number_id',
  'barcode',
  'rank',
  'height',
  'weight',
  'age',
  'technician'
);

$quotable = array( 'barcode', 'technician' );

$sql_col = 'INSERT INTO apex_exam (' . implode( ',', $columns );

// Convenience lookup for scan_type information
//
$sql = 'SELECT id AS scan_type_id, type, side FROM scan_type';

$res = $db_salix->get_all( $sql );
$types = array();
foreach( $res as $value )
{
  $types[$value['scan_type_id']] = array( 'type' => $value['type'], 'side' => $value['side'] );
}

// Every Apex system installed at a DCS has a unique serial number.
// Create a convenience lookup between site names and the serial number and Cenozo site table ids
//
$sql = sprintf(
  'SELECT name AS site, n.id AS serial_number_id, s.id AS site_id '.
  'FROM serial_number n '.
  'JOIN %scenozo.site s ON s.id=n.site_id',
  DB_PREFIX
);

$res = $db_salix->get_all( $sql );
$site_lookup = array();
foreach( $res as $values )
{
  $site_lookup[$values['site']] = array(
    'serial_number_id' => $values['serial_number_id'],
    'site_id' => $values['site_id']
  );
}

// Loop over the per UID meta data
//
foreach( $list as $uid => $row )
{
  if( '' == $row['barcode'] || '' == $row['site'] ) continue;

  // Get the participant baseline data (eg., DOB, gender etc.)
  //
  $sql_p = sprintf(
    'SELECT DISTINCT b.id '.
    'FROM apex_baseline b '.
    'JOIN %scenozo.participant p ON p.id=b.participant_id '.
    'WHERE uid="%s"',
    DB_PREFIX,
    $uid
  );

  $res = $db_salix->get_one( $sql_p );
  if( false === $res || '' == $res ) continue;
  $apex_baseline_id = $res;

  // Site names stored in Opal are filtered via magmascript to match
  // DCS site names defined in Cenozo
  //
  if( !array_key_exists( $row['site'], $site_lookup ) ) continue;

  $item = $site_lookup[$row['site']];
  $serial_number_id = $item['serial_number_id'];

  // Meta data related to the DXA exam captured during the interview
  //
  $data = array(
    $apex_baseline_id,
    $serial_number_id,
    '"' . $row['barcode'] . '"',
    $rank,
    '' == $row['height'] ? 'NULL' : $row['height'],
    '' == $row['weight'] ? 'NULL' : $row['weight'],
    '' == $row['age'] ? 'NULL' : $row['age'],
    '' == $row['technician'] ? 'NULL' : '"' . $row['technician'] . '"'
  );

  $sql_val =
    ') VALUES (' . implode( ',', $data ) . ') ';
  $sql_dup =
    'ON DUPLICATE KEY UPDATE '.
    'apex_baseline_id = VALUES( apex_baseline_id ), '.
    'serial_number_id = VALUES( serial_number_id ), '.
    'barcode = VALUES( barcode ), '.
    'rank = VALUES( rank ), '.
    'height = VALUES( height ), '.
    'weight = VALUES( weight ), '.
    'age = VALUES( age ), '.
    'technician = VALUES( technician )';

  // Build and execute the sql statement to insert a new or update a pre-existing record
  // in the apex_exam table
  //
  $sql = $sql_col . $sql_val . $sql_dup;
  if( false === $db_salix->execute( $sql ) )
  {
    write_log( sprintf( 'WARNING: failed to update apex_exam for %s / %s', $uid, $row['barcode']  ) );
  }

  // Get the apex_exam record id
  //
  $sql = sprintf(
    'SELECT id FROM apex_exam '.
    'WHERE apex_baseline_id=%d '.
    'AND serial_number_id=%d '.
    'AND rank=%d '.
    'AND barcode="%s"',
    $apex_baseline_id,
    $serial_number_id,
    $rank,
    $row['barcode']
  );
  $apex_exam_id = $db_salix->get_one( $sql );
  if( false === $apex_exam_id || '' == $apex_exam_id )
  {
    $dup_val = array_combine( $columns, $data );
    $sql = sprintf(
      'SELECT id FROM apex_exam '.
      'WHERE apex_baseline_id=%d '.
      'AND serial_number_id=%d '.
      'AND rank=%d '.
      'AND barcode=%s',
      $apex_baseline_id,
      $serial_number_id,
      $dup_val['rank'],
      $dup_val['barcode']
    );

    $apex_exam_id = $db_salix->get_one( $sql );
  }
  if( false === $apex_exam_id || '' == $apex_exam_id ) continue;

  // Create records in the apex_scan table for the types of scans
  // performed during the exam
  //
  foreach( $types as $scan_type_id => $type_data )
  {
    $sql = 'INSERT INTO apex_scan (apex_exam_id, scan_type_id, availability';

    $type = $type_data['type'];
    $side = $type_data['side'];
    $type_qualified = 'none' == $side ? $type : $type . '_' . $side;
    $key = $type_qualified . '_availability';
    $availability = '';
    if( array_key_exists( $key, $row ) ) $availability = $row[$key];
    $availability = '' == $availability ? 0 : $availability;

    $key = $type_qualified . '_length';
    if('forearm' == $type && array_key_exists( $key, $row ) && is_numeric($row[$key]))
    {
      $forearm_length = $row[$key];
      $sql .= sprintf(
        ',forearm_length) VALUES (%d, %d, %d, %s) ',
        $apex_exam_id,
        $scan_type_id,
        $availability,
        $forearm_length
      );
      $sql .=
        'ON DUPLICATE KEY UPDATE ' .
        'availability = VALUES( availability ), '.
        'forearm_length = VALUES( forearm_length )';
    }
    else
    {
      $sql .= sprintf( ') VALUES (%d, %d, %d) ', $apex_exam_id, $scan_type_id, $availability );
      $sql .=
        'ON DUPLICATE KEY UPDATE ' .
        'availability = VALUES( availability )';
    }

    if( false === $db_salix->execute( $sql ) )
    {
      write_log( sprintf( 'WARNING: failed to update apex_scan for %s / %s', $uid, $row['barcode']  ) );
    }
  }
}

write_log( 'receive_opal_meta done! Updated exam and scan tables with ' . $total . ' identifiers' );

return 1;
