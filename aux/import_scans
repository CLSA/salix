#!/usr/bin/php
<?php
/**
 * import_scans.php
 *
 * A script for retrieving DEXA scans from Opal based on
 * apex_deployment table information.
 * To direct to only one host, set the allocation
 * ratios accordingly in the salix UI.
 *
 * @author Dean Inglis <inglisd@mcmaster.ca>
 */

chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial( true );
$settings = $initial->get_settings();

define( 'OPAL_SERVER', $settings['opal']['server'] );
define( 'OPAL_PORT', $settings['opal']['port'] );
define( 'OPAL_USERNAME', $settings['opal']['username']  );
define( 'OPAL_PASSWORD', $settings['opal']['password'] );

define( 'DB_SERVER', $settings['db']['server'] );
define( 'DB_PREFIX', $settings['db']['database_prefix'] );
define( 'DB_USERNAME', $settings['db']['username'] );
define( 'DB_PASSWORD', $settings['db']['password'] );

define( 'USER', $settings['utility']['username'] );
define( 'APEX_SSH_KEY', $settings['apex']['apex_ssh_key'] );

// a lite mysqli wrapper
require_once( $settings['path']['PHP_UTIL'].'/database.class.php' );
// a lite odbc wrapper
require_once( $settings['path']['PHP_UTIL'].'/odbc.class.php' );
// a lite curl wrapper
require_once( $settings['path']['PHP_UTIL'].'/opalcurl.class.php' );
// dexa scan helper class
require_once( 'dexa_scan.class.php' );

// function for writing to the log
function write_log( $message )
{
  file_put_contents(
    LOG_FILE_PATH,
    sprintf( "%s  [cron] <%s> %s\n\n", date( 'Y-m-d (D) H:i:s' ), USER, $message ),
    FILE_APPEND
  );
}

// turn on for detailed debug loggging
//
$do_verbose_logging = false;

// scp args: apex host address, source file, destination file
function scp_command( $address, $source, $destination )
{
  global $do_verbose_logging;
  $cmd = sprintf(
    'scp -i %s %s clsa@%s:/cygdrive/e/InComing/%s',
    APEX_SSH_KEY,
    $source,
    $address,
    $destination
  );
  if ($do_verbose_logging) write_log('current scp command: ' . $cmd);
  return trim( shell_exec( $cmd ) );
}

// ssh args: apex host address, command arg
function ssh_command( $address, $arg )
{
  global $do_verbose_logging;
  $cmd = sprintf('ssh -i ' . APEX_SSH_KEY . ' clsa@%s %s', $address, $arg ) ;
  if ($do_verbose_logging) write_log('current ssh command: ' . $cmd);
  return trim( shell_exec( $cmd ) );
}

// dgate (conquest dicom server service) args: apex host address, command arg
function dgate_command( $address, $arg )
{
  return ssh_command( $address, '/cygdrive/c/dicomserverIn/dgate -v ' . $arg );
}

/*-------------MAIN PROGRAM-----------*/
// see daily_cron for example use of args
//
// optional arguments: limit on number of scans (eg. 100),
// type of scan to apply weights to. Default is hip.
// Each APEX host at baseline has a percentage of scans attribute
// to spread the workload to specific hosts.  For example, with wbody scans
// all hosts were assigned 1/3 of the total baseline scans.  Since followup
// scans must thereafter be paired with their baseline sibling, the weighting
// after baseline is ignore.
//
$deployment_total = 200; // default number of scans per run of this script
$deployment_type = 'hip'; // default type
if( 2 <= $argc )
{
  $deployment_total = $argv[1];
  if( 3 == $argc ) $deployment_type = $argv[2];
}

// the database object that accepts mysql statements
//
$db_salix = null;
try
{
  $db_salix = new database( DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_PREFIX . 'salix' );
}
catch( Exception $e )
{
  write_log( $e->getMessage() );
  return 0;
}

// BYPASS QUOTA CALCULATIONS IF TRUE
// THIS WILL FORCE IMPORT OF ALL PENDING DEPLOYMENTS ON EACH HOST
//
$no_quota = false;

// the quota / weight for each host
//
$sql = 'SELECT *, 0 AS quota FROM apex_host';
$res = $db_salix->get_all( $sql );
$host_list = array();
foreach( $res as $item )
{
  $name = $item['name'];
  unset( $item['name'] );
  $host_list[$name] = $item;
}

// verify that for the dexa scan type that has more than one
// side and for each host that the weights are equal
//
$sql =
 'select type, side, weight, h.name as host, h.id as apex_host_id '.
 'from allocation a '.
 'join scan_type t on t.id=a.scan_type_id '.
 'join apex_host h on h.id=a.apex_host_id';

$res = $db_salix->get_all($sql);
if(null === $res || !is_array($res))
{
  return 0;
}

foreach($res as $item)
{
  $name = $item['host'];
  $type = $item['type'];
  $side = $item['side'];
  $weight = $item['weight'];
  $host_list[$name][$type][$side] = $weight;

  if(2 == count(array_keys($host_list[$name][$type])) &&
     in_array($side, array('left','right')))
  {
    if($host_list[$name][$type]['left'] !=
       $host_list[$name][$type]['right'])
    {
      write_log('ERROR: asymmetric weights');
      return 0;
    }
  }
}

$sql =
  'select type, '.
  'if(sum(if(side="none",0,1))>0,1,0) as bilateral, '.
  'sum(weight) as total_weight '.
  'from allocation a '.
  'join scan_type t on t.id=a.scan_type_id '.
  'join apex_host h on h.id=a.apex_host_id '.
  'where side in ("left","none") '.
  'group by type order by type';

$res = $db_salix->get_all($sql);

// assert results
//
if(false === $res || !is_array($res))
{
  return 0;
}

// determine how may of the total requested scans to import
// for each host based on the hosts quota
//
foreach($res as $item)
{
  $type = $item['type'];
  $total_weight = round($item['total_weight'], 3);
  foreach($host_list as $name => $type_list)
  {
    if(array_key_exists($type, $type_list))
    {
      $side = $item['bilateral'] ? 'left' : 'none';
      $weight = $type_list[$type][$side];
      $percent = $weight / $total_weight;
      $host_list[$name][$type] = $percent;
    }
  }
}

foreach( $host_list as $name => $item )
{
  $percent = $host_list[$name][$deployment_type];
  $host_list[$name]['quota'] = intval( round( $percent * $deployment_total ) );
}

// Get deployments for scans that have not been scp'd to each
// target APEX host.  Priority scans flagged in
// Salix UI will be analyzed first.
//
$scan_list = array();
foreach( $host_list as $name => $item )
{
  $quota = $item['quota'];
  $apex_host_id = $item['id'];

  $sql = sprintf(
    'SELECT uid, '.
    'type, '.
    'side, '.
    'rank, '.
    'barcode, '.
    's.id AS apex_scan_id, '.
    'priority, '.
    'n.id AS serial_number, '.
    't.id AS scan_type_id, '.
    'h.id AS apex_host_id '.
    'FROM apex_exam e '.
    'JOIN apex_scan s ON s.apex_exam_id=e.id '.
    'JOIN scan_type t ON s.scan_type_id=t.id '.
    'JOIN serial_number n ON e.serial_number_id=n.id '.
    'JOIN apex_baseline b ON e.apex_baseline_id=b.id '.
    'JOIN %scenozo.participant p ON b.participant_id=p.id '.
    'JOIN apex_deployment d ON d.apex_scan_id=s.id '.
    'JOIN apex_host h ON d.apex_host_id=h.id '.
    'WHERE s.availability=1 '.
    'AND d.status IS NULL '.
    'AND d.comp_scanid IS NULL '.
    'AND d.analysis_datetime IS NULL '.
    'AND d.import_datetime IS NULL '.
    'AND d.export_datetime IS NULL '.
    'AND h.id=%d '.
    'AND t.type="%s" '.
    'ORDER BY uid, priority DESC', DB_PREFIX, $apex_host_id, $deployment_type );

  $data_list = $db_salix->get_all( $sql );

  if( false === $data_list || !is_array( $data_list ) ||
    0 == count( $data_list ) ) continue;

  // aggregate the deployment data into a per scan data structure, tracking
  // flagged priority records
  //
  $current_uid = NULL;
  $priority_keys = array();
  $current_list = array();
  $num_scans = 0;
  foreach( $data_list as $data )
  {
    $item = new dexa_scan(
      $data['uid'], $data['type'], $data['side'],
      $data['rank'], $data['barcode'], $data['serial_number'],
      $data['apex_scan_id'], $data['scan_type_id'], $data['priority'], $apex_host_id );

    if( $item->uid != $current_uid )
    {
      $current_uid = $item->uid;
      $current_list[$item->uid] = array();
    }
    if( $current_uid == $item->uid )
    {
      $current_list[$item->uid][] = $item;
      $num_scans++;
    }
    if( 1 == $item->priority ) $priority_keys[] = $item->uid;
  }

  // prioritize scans to the front of the queue
  //
  if( 0 < count( $priority_keys ) )
  {
    $priority_keys = array_unique( $priority_keys );
    foreach( $priority_keys as $uid )
    {
      $current_list = array( $uid => $current_list[$uid] ) + $current_list;
    }
  }

  // honor quota restrictions while maintaining groupings of sibling scans
  //
  if( 0 < $quota && false === $no_quota)
  {
    if( $quota < $num_scans )
    {
      // count scans within uid groupings until the quota is reached
      //
      $slice_offset = 0;
      $num_scans = 0;
      foreach($current_list as $uid => $item_list)
      {
        $slice_offset++;
        foreach($item_list as $item) $num_scans++;
        if($quota <= $num_scans) break;
      }
      $current_list = array_slice( $current_list, 0, $slice_offset, true );
    }
  }

  if( 0 < count( $current_list ) )
    $scan_list[$name] = $current_list;
}

// connect to opal source to download scans (binary blobs) using curl
//
$opal_curl = new opalcurl( OPAL_SERVER, OPAL_PORT, OPAL_USERNAME, OPAL_PASSWORD );
$opal_curl->set_datasource( 'salix' );

// verify that on each host, both the incoming Conquest dicom server and APEX are running
//
$verify_host_list = array_keys( $scan_list );
foreach( $verify_host_list as $name )
{
  $db_dexa_server = strtoupper( $name );
  $db_dexa_username = $host_list[$name]['sql_user'];
  $db_dexa_password = $host_list[$name]['sql_pass'];
  try
  {
    $db_dexa = new odbc( $db_dexa_server, $db_dexa_username, $db_dexa_password );
  }
  catch( Exception $e )
  {
    write_log( $e->getMessage() );
    return 0;
  }

  $host_address = $host_list[$name]['host'];

  // send a ping command to Conquest dgate to verify the incoming Conquest dicom server
  // is running and can receive dicom files scp'd from the Salix server
  //
  $res = dgate_command( $host_address, '--echo:CONQUESTSRV1' );
  if( NULL === $res || ( false === strpos( $res, 'UP' ) ) )
  {
    write_log( sprintf(
      'ERROR: host dicom server (%s) is not running ("%s") !',
      $name,
      ( NULL=== $res ? 'null response' : $res )
    ) );

    return 0;
  }

  // send a ping command to verify Apex sofware is running and can receive
  // dicom send commands from the incoming Conquest dicom server
  //
  $res = ssh_command( $host_address, ' tasklist /FI \"IMAGENAME eq qdr.exe\" /FO LIST' );
  if( NULL === $res || ( false === strpos( $res, 'qdr.exe' ) ) )
  {
    write_log( sprintf( 'ERROR: Apex (%s) is not running!', $name ) );
    return 0;
  }
}

if ($do_verbose_logging)
  write_log('all hosts passed communication checks with Apex and DGate');

// loop over hosts
//
$process_list = array(
  'name' => array(),
  'num_transfer' => array(),
  'num_candidate' => array(),
  'num_verify' => array()
  );

// for each Apex host process the list of identifiers / barcodes
//
foreach( $scan_list as $name => $identifier_list )
{
  $db_dexa_server = strtoupper( $name );
  $db_dexa_username = $host_list[$name]['sql_user'];
  $db_dexa_password = $host_list[$name]['sql_pass'];
  $host_address = $host_list[$name]['host'];

  // establish a connection to the current host's Apex MS SQL server
  //
  $db_dexa = null;
  try
  {
    $db_dexa = new odbc( $db_dexa_server, $db_dexa_username, $db_dexa_password );
  }
  catch( Exception $e )
  {
    write_log( $e->getMessage() );
    return 0;
  }

  if ($do_verbose_logging)
  {
    write_log( sprintf(
      'starting to transfer %d participants files using host %s',
      count( array_keys( $identifier_list ) ),
      $db_dexa_server
    ) );
  }

  $num_transfer = 0;
  $num_candidate = 0;

  // for each set of scans of the same type and side belonging to a partcipant UID
  // process each scan.  The item / scan list is determined previously to honor quota restrictions.
  //
  foreach( $identifier_list as $uid => $item_list )
  {
    foreach( $item_list as $item )
    {
      // get the scan file and its name if successfully copied via curl from opal to the Salix storage folder
      //
      $opal_err = '';
      $filename = $item->get_scan_file( $opal_curl, TEMP_PATH, $opal_err );
      $num_candidate++;
      if( NULL !== $filename )
      {
        if ($do_verbose_logging)
          write_log('working on current participant ' . $uid . ' file ' . $filename );

        // run gdcmconv -E -w the_file.dcm the_file.dcm to fix end of file characters and other anomalies
        //
        $gcmd = sprintf( 'gdcmconv -E -w %s %s', $filename, $filename );
        if ($do_verbose_logging) write_log('current gdcm command ' .  $gcmd );
        exec( $gcmd );

        // scp the_file.dcm to the Apex host E:\InComing directory
        // determine the name of the subdirectory based on baseline barcode and scan type
        //
        $subpath = 'none' == $item->side
                 ? sprintf( '%s/%s', $item->type, $item->barcode )
                 : sprintf( '%s/%s/%s', $item->type, $item->side, $item->barcode );

        // create the target directory on the Apex host
        //
        $res = ssh_command( $host_address, 'mkdir /cygdrive/e/InComing/' . $subpath );
        $base = basename( $filename );
        $res = scp_command( $host_address, $filename, $subpath . '/' . $base );

        // store a backup of the original dicom file on the Apex host for debug and other purposes
        // in root E:/ORIGINAL
        //
        $item->import_datetime = date( 'Y-m-d H:i:s' );
        $item->copy_from = '/cygdrive/e/InComing/' . $subpath . '/' . $base;
        $item->copy_to = '/cygdrive/e/ORIGINAL/' . $subpath . '/' . $base;

        // dispose of the file on this Salix host.  Failed transfers are re-attempted on the next daily cron
        //
        unlink( $filename );
        $num_transfer++;
      }
      else
      {
        write_log('ERROR working on current participant ' . $uid . ' filename is NULL');
        if ($do_verbose_logging)
        {
          write_log('ERROR from get_scan_file, item object: ' . print_r($item,true));
          write_log('ERROR from get_scan_file: ' . $opal_err);
        }
      }
    }
  }

  // wait a few seconds for scp transfer to complete
  //
  sleep(30);

  // remotely run the Conquest dicom server command to rebuild its database
  //
  $res = dgate_command( $host_address, '--initializetables' );
  if( '' != $res )
  {
    write_log( sprintf( 'ERROR: %s failed to initialize conquest dicom server tables: %s', $name, $res ) );
  }

  // regenerate the Conquest dicom server database by scraping files in E:\InComing
  //
  $res = dgate_command( $host_address, '--regendevice:MAG0' );
  if( '' != $res )
  {
    write_log( sprintf( 'ERROR: %s failed to regenerate conquest dicom server image db: %s', $name, $res ) );
  }

  // dicom C-Move files from Conquest incoming to Apex
  //
  $res = dgate_command( $host_address, sprintf( '--movepatient:CONQUESTSRV1,DEXA_%s,*', $name ) );
  if( 0 != $res )
  {
    write_log( sprintf( 'ERROR: %s failed to dicom C-move images to Apex: %s', $name, $res ) );
  }

  sleep(30);

  // query Apex MS SQL database to verify dicom C-move
  //
  $sql_str =
    'SELECT p.PATIENT_KEY patient_key, '.
    's.SCANID scanid, '.
    'CONVERT(varchar,s.SCAN_DATE) scan_datetime, '.
    's.SERIAL_NUMBER serial_number '.
    'FROM PatScan.dbo.PATIENT p '.
    'INNER JOIN PatScan.dbo.ScanAnalysis s '.
    'ON s.PATIENT_KEY=p.PATIENT_KEY '.
    'WHERE s.SCAN_TYPE=%d '.
    "AND p.IDENTIFIER1='%s'";

  // reloop through this host's set of scan items and run the SQL query
  //
  $num_verify = 0;
  foreach( $identifier_list as $uid => $item_list )
  {
    foreach( $item_list as $item )
    {
      // query Apex SQL db
      //
      $sql = sprintf( $sql_str, $item->scan_type_id, $item->barcode );
      $res = $db_dexa->get_row( $sql );
      $filename = $item->get_basefile_name();

      if( false === $res || '' == $res )
      {
        write_log( sprintf('ERROR: %s failed to dicom transfer file %s', $name, $filename ) );
      }
      else
      {
        $serial_number = $res['serial_number'];
        $scanid = $res['scanid'];
        $patient_key = $res['patient_key'];
        $scan_datetime = $res['scan_datetime'];

        $sql = sprintf(
          'UPDATE apex_scan '.
          'SET '.
          'scan_datetime="%s", '.
          'scanid="%s", '.
          'patient_key="%s" '.
          'WHERE id=%d ',
          $scan_datetime,
          $scanid,
          $patient_key,
          $item->apex_scan_id
        );

        $db_salix->execute( $sql );

        $sql = sprintf(
          'UPDATE apex_deployment SET '.
          'merged=0, status="pending", comp_scanid=NULL, analysis_datetime=NULL, import_datetime="%s" '.
          'WHERE apex_host_id=%d '.
          'AND apex_scan_id=%d',
          $item->import_datetime,
          $item->apex_host_id,
          $item->apex_scan_id
        );

        $db_salix->execute( $sql );

        // copy the file on the host from InComing to ORIGINAL
        // create the barcode subdirectory
        //
        $dir = '/cygdrive/e/ORIGINAL/' . $item->type . '/';
        $dir .= ('none' == $item->side) ? $item->barcode : ( $item->side . '/' . $item->barcode);
        $res = ssh_command( $host_address, 'mkdir -p ' . $dir );
        $res = ssh_command( $host_address, sprintf( 'cp %s %s', $item->copy_from, $item->copy_to ) );

        // remove the barcode sub-directory from InComing
        //
        $dir = str_replace( '/cygdrive/e/ORIGINAL/', '/cygdrive/e/InComing/', $dir );
        $res = ssh_command( $host_address, 'rm -rf ' . $dir );

        $num_verify++;
      }
    }
  }
  // track what has been done
  //
  $process_list['name'][] = $name;
  $process_list['num_transfer'][] = $num_transfer;
  $process_list['num_candidate'][] = $num_candidate;
  $process_list['num_verify'][] = $num_verify;
}

// log what has been done
//
write_log( sprintf(
  'hosts [%s] candidates [%s] transfers [%s] verified [%s]',
  implode( '/', $process_list['name'] ),
  implode( '/', $process_list['num_candidate'] ),
  implode( '/', $process_list['num_transfer'] ),
  implode( '/', $process_list['num_verify'] )
) );

write_log( 'import_scans done!');

return 1;
