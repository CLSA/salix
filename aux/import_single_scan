#!/usr/bin/php
<?php
/**
 * import_single_scan.php
 *
 * A script for retrieving a single DEXA scan from opal,
 * creating a deployment for it in the salix db, and pushing
 * it to an apex host.  Command line args required:
 * host name, uid, barcode, rank, type, side
 *
 * @author Dean Inglis <inglisd@mcmaster.ca>
 */

chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial( true );
$settings = $initial->get_settings();

define( 'OPAL_SERVER', $settings['opal']['server'] );
define( 'OPAL_PORT', $settings['opal']['port'] );
define( 'OPAL_USERNAME', $settings['opal']['username']  );
define( 'OPAL_PASSWORD', $settings['opal']['password'] );

define( 'DB_SERVER', $settings['db']['server'] );
define( 'DB_PREFIX', $settings['db']['database_prefix'] );
define( 'DB_USERNAME', $settings['db']['username'] );
define( 'DB_PASSWORD', $settings['db']['password'] );

define( 'IMAGE_PATH', $settings['path']['TEMPORARY_FILES'] );
define( 'USER', $settings['utility']['username'] );
define( 'APEX_SSH_KEY', $settings['apex']['apex_ssh_key'] );

// a lite mysqli wrapper
require_once( $settings['path']['PHP_UTIL'].'/database.class.php' );
// a lite odbc wrapper
require_once( $settings['path']['PHP_UTIL'].'/odbc.class.php' );
// a lite curl wrapper
require_once( $settings['path']['PHP_UTIL'].'/opalcurl.class.php' );
// dexa scan helper class
require_once( 'dexa_scan.class.php' );

// function for writing to the log
function write_log( $message )
{
  file_put_contents(
    LOG_FILE_PATH,
    sprintf( "%s  [cron] <%s> %s\n\n", date( 'Y-m-d (D) H:i:s' ), USER, $message ),
    FILE_APPEND
  );
}

// scp args: apex host address, source file, destination file
function scp_command( $address, $source, $destination )
{
  return trim( shell_exec( sprintf(
    'scp -i ' . APEX_SSH_KEY .
    ' %s clsa@%s:/cygdrive/e/InComing/%s', $source, $address, $destination ) ) );
}

// ssh args: apex host address, command arg
function ssh_command( $address, $arg )
{
  return trim( shell_exec( sprintf(
    'ssh -i ' . APEX_SSH_KEY . ' clsa@%s %s', $address, $arg ) ) );
}

// dgate (conquest dicom server service) args: apex host address, command arg
function dgate_command( $address, $arg )
{
  return ssh_command( $address, '/cygdrive/c/dicomserverIn/dgate -v ' . $arg );
}

/*-------------MAIN PROGRAM-----------*/

// arguments: host, UID, barcode, rank, type, side
if( 7 != $argc )
{
  write_log( 'ERROR: invalid arguments ' . implode( ',' , $argv ) );
  write_log( 'usage: import_single_scan host uid barcode rank type side' );
  return 0;
}

$db_salix = null;
try
{
  $db_salix = new database(
    DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_PREFIX . 'salix' );
}
catch( Exception $e )
{
  write_log( $e->getMessage() );
  return 0;
}

$option_host = $argv[1];
$option_uid = $argv[2];
$option_barcode = $argv[3];
$option_rank = $argv[4];
$option_type = $argv[5];
$option_side = $argv[6];

$sql = 'SELECT * FROM apex_host';
$res = $db_salix->get_all( $sql );
$host_list = array();
foreach( $res as $item )
{
  $name = $item['name'];
  unset( $item['name'] );
  $host_list[$name] = $item;
}

if( NULL !== $option_host && !array_key_exists( $option_host, $host_list ) )
{
  write_log( 'ERROR: unknown host option ' . $option_host );
  return 0;
}

// verify that both conquest dicom server and APEX are running
$db_dexa_server = strtoupper( $option_host );
$db_dexa_username = $host_list[$option_host]['sql_user'];
$db_dexa_password = $host_list[$option_host]['sql_pass'];
try
{
  $db_dexa = new odbc( $db_dexa_server, $db_dexa_username, $db_dexa_password );
}
catch( Exception $e )
{
  write_log( $e->getMessage() );
  return 0;
}

$host_address = $host_list[$option_host]['host'];

$res = dgate_command( $host_address, '--echo:CONQUESTSRV1' );
if( NULL === $res || ( false === strpos( $res, 'UP' ) ) )
{
  write_log( sprintf( 'ERROR: host dicom server (%s) is not running!' . $option_host ) );
  return 0;
}

$res = ssh_command( $host_address, ' tasklist /FI \"IMAGENAME eq qdr.exe\" /FO LIST' );
if( NULL === $res || ( false === strpos( $res, 'qdr.exe' ) ) )
{
  write_log( sprintf( 'ERROR: Apex (%s) is not running!', $option_host ) );
  return 0;
}

$apex_host_id = $host_list[$option_host]['id'];

$sql = sprintf(
  'SELECT '.
  's.id AS apex_scan_id, '.
  'n.id AS serial_number, '.
  't.id AS scan_type_id, '.
  'priority, '.
  'IFNULL(d.id, "NULL") AS apex_deployment_id '.
  'FROM apex_exam e '.
  'JOIN apex_scan s ON s.apex_exam_id=e.id '.
  'JOIN scan_type t ON s.scan_type_id=t.id '.
  'JOIN serial_number n ON e.serial_number_id=n.id '.
  'JOIN apex_baseline b ON e.apex_baseline_id=b.id '.
  'JOIN %scenozo.participant p ON b.participant_id=p.id '.
  'LEFT JOIN apex_deployment d ON d.apex_scan_id=s.id '.
  'LEFT JOIN apex_host h ON d.apex_host_id=h.id '.
  'WHERE s.availability=1 '.
  'AND uid="%s" '.
  'AND barcode="%s" '.
  'AND rank=%d '.
  'AND type="%s" '.
  'AND side="%s" '.
  'AND (h.id=%d OR h.id IS NULL)',
  DB_PREFIX,
  $option_uid, $option_barcode, $option_rank,
  $option_type, $option_side, $apex_host_id );

$data = $db_salix->get_row( $sql );

if( false === $data || !is_array( $data ) )
{
  write_log( 'ERROR: requested scan is either not available or the arguments are malformed' );
  write_log( $sql );
  return 0;
}

$item = new dexa_scan(
  $option_uid, $option_type, $option_side,
  $option_rank, $option_barcode, $data['serial_number'],
  $data['apex_scan_id'], $data['scan_type_id'], $data['priority'], $apex_host_id );

// connect to opal source to download scans using curl
//
$opal_curl = new opalcurl( OPAL_SERVER, OPAL_PORT, OPAL_USERNAME, OPAL_PASSWORD );
$opal_curl->set_datasource( 'salix' );

$filename = $item->get_scan_file( $opal_curl, IMAGE_PATH );
if( NULL !== $filename && false === $item->validate( $filename ) )
{
  // create a deploment if required
  $apex_deployment_id = 'NULL' == $data['apex_deployment_id'] ? NULL : $data['apex_deployment_id'];
  $new_deployment = false;
  if( NULL === $apex_deployment_id )
  {
    $new_deployment = true;
    $apex_scan_id = $data['apex_scan_id'];
    $sql = sprintf(
      'INSERT INTO apex_deployment '.
      '(apex_scan_id, apex_host_id) '.
      'VALUES (%d, %d)', $apex_scan_id, $apex_host_id );
    $db_salix->execute( $sql );
    $sql = sprintf(
      'SELECT id '.
      'FROM apex_deployment '.
      'WHERE apex_host_id=%d '.
      'AND apex_scan_id=%d', $apex_host_id, $apex_scan_id );
    $apex_deployment_id = $db_salix->get_one( $sql );
    if( false === $apex_deployment_id )
    {
      write_log( 'ERROR: failed to create apex deployment' );
      return 0;
    }
  }
}
else
{
  write_log( 'ERROR: failed to retrieve a valid file' );
  return 0;
}

// run gdcmconv -E -w the_file.dcm the_file.dcm
exec( sprintf( 'gdcmconv -E -w %s %s', $filename, $filename ) );

// scp the_file.dcm to the host E:\InComing dir
$subpath = '';
if( 'none' == $item->side )
$subpath = sprintf( '%s/%s', $item->type, $item->barcode );
else
$subpath = sprintf( '%s/%s/%s', $item->type, $item->side, $item->barcode );

$res = ssh_command( $host_address, sprintf( 'mkdir /cygdrive/e/InComing/%s 2>/dev/null', $subpath ) );

$base = basename( $filename );

$res = scp_command( $host_address, $filename, $subpath . '/' . $base );

$item->import_datetime = date( 'Y-m-d H:i:s' );
$item->copy_from = '/cygdrive/e/InComing/' . $subpath . '/' . $base;
$item->copy_to = '/cygdrive/e/ORIGINAL/' . $subpath . '/' . $base;

unlink( $filename );

// wait a few seconds for scp transfer to complete
sleep(5);

// remotely run the conquest dicom server to rebuild its db
$res = dgate_command( $host_address, '--initializetables' );
if( '' != $res )
{
  write_log( sprintf( 'ERROR: failed to initialize conquest dicom server tables: %s', $res ) );
  return 0;
}

// regenerate the conquest dicom server db from files in E:\InComing
$res = dgate_command( $host_address, '--regendevice:MAG0' );
if( '' != $res )
{
  write_log( sprintf( 'ERROR: failed to regenerate conquest dicom server image db: %s', $res ) );
  return 0;
}

// dicom C-Move files to Apex
$res = dgate_command( $host_address, sprintf( '--movepatient:CONQUESTSRV1,DEXA_%s,*', $option_host ) );
if( 0 != $res )
{
  write_log( sprintf( 'ERROR: failed to dicom C-move images to Apex: %s', $res ) );
  return 0;
}

// query Apex MS SQL Server db to verify transfer
$sql_str =
  'SELECT p.PATIENT_KEY patient_key, '.
  's.SCANID scanid, '.
  'CONVERT(varchar,s.SCAN_DATE) scan_datetime, '.
  's.SERIAL_NUMBER serial_number '.
  'FROM PatScan.dbo.PATIENT p '.
  'INNER JOIN PatScan.dbo.ScanAnalysis s '.
  'ON s.PATIENT_KEY=p.PATIENT_KEY '.
  'WHERE s.SCAN_TYPE=%d '.
  "AND p.IDENTIFIER1='%s'";

// query Apex SQL db
$sql = sprintf( $sql_str, $item->scan_type_id, $item->barcode );
$res = $db_dexa->get_row( $sql );
$filename = $item->get_basefile_name();

if( false === $res || '' == $res )
{
  write_log( sprintf( 'ERROR: failed to dicom transfer file %s', $filename ) );
}
else
{
  $serial_number = $res['serial_number'];
  $scanid = $res['scanid'];
  $patient_key = $res['patient_key'];
  $scan_datetime = $res['scan_datetime'];

  $sql = sprintf(
    'UPDATE apex_scan '.
    'SET '.
    'scan_datetime="%s", '.
    'scanid="%s", '.
    'patient_key="%s" '.
    'WHERE id=%d ', $scan_datetime, $scanid, $patient_key, $item->apex_scan_id );

  $db_salix->execute( $sql );

  if( $new_deployment )
  {
    $sql = sprintf(
      'UPDATE apex_deployment SET '.
      'merged=0, status="pending", '.
      'comp_scanid=NULL, analysis_datetime=NULL, import_datetime="%s" '.
      'WHERE id=%d ',
      $item->import_datetime, $item->apex_deployment_id );

    $db_salix->execute( $sql );
  }

  // copy the file on the host from InComing to ORIGINAL
  // create the barcode subdirectory
  $dir = '/cygdrive/e/ORIGINAL/' . $item->type . '/';
  $dir .= ('none' == $side) ? $item->barcode : ( $item->side . '/' . $item->barcode);
  $res = ssh_command( $host_address, 'mkdir -p ' . $dir );
  $res = ssh_command( $host_address, sprintf( 'cp %s %s', $item->copy_from, $item->copy_to ) );

  // remove the barcode sub-directory from InComing
  $dir = str_replace( '/cygdrive/e/ORIGINAL/', '/cygdrive/e/InComing/', $dir );
  $res = ssh_command( $host_address, 'rm -rf ' . $dir );
}

write_log( 'import_single_scan done!');

return 1;
