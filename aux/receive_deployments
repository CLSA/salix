#!/usr/bin/php
<?php
/**
 * receive_deployments.php
 *
 * A script for retrieving DEXA scans, verifying their content,
 * and creating a deployment record for subsequent transfer to
 * the APEX host workstations.
 *
 * @author Dean Inglis <inglisd@mcmaster.ca>
 */

chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial( true );
$settings = $initial->get_settings();

define( 'OPAL_SERVER', $settings['opal']['server'] );
define( 'OPAL_PORT', $settings['opal']['port'] );
define( 'OPAL_USERNAME', $settings['opal']['username']  );
define( 'OPAL_PASSWORD', $settings['opal']['password'] );

define( 'DB_SERVER', $settings['db']['server'] );
define( 'DB_PREFIX', $settings['db']['database_prefix'] );
define( 'DB_USERNAME', $settings['db']['username'] );
define( 'DB_PASSWORD', $settings['db']['password'] );

define( 'USER', $settings['utility']['username'] );

// a lite mysqli wrapper
require_once( $settings['path']['PHP_UTIL'].'/database.class.php' );
// a lite curl wrapper
require_once( $settings['path']['PHP_UTIL'].'/opalcurl.class.php' );
// scan collector helper class
require_once( $settings['path']['APPLICATION'].'/aux/scan_collector.class.php' );

// function for writing to the log
function write_log( $message )
{
  file_put_contents(
    LOG_FILE_PATH,
    sprintf( "%s  [cron] <%s> %s\n\n", date( 'Y-m-d (D) H:i:s' ), USER, $message ),
    FILE_APPEND
  );
}

/*----------------MAIN PROGRAM----------------*/

// Specify the maximum rank
//
if( $argc < 2 )
{
  write_log('ERROR: invalid args ' . implode( ',', $argv ) );
  return 0;
}
$max_rank = $argv[1];

// Limit the bandwidth of data transfer
//
$deployment_limit = 100;
if( 3 == $argc )
{
  $deployment_limit = $argv[2];
}

// Restrict to a specific type
//
$type_restriction = null;
if( 4 == $argc )
{
  $type_restriction = $argv[3];
}
// OVERRIDE FOR WAVE 3  - restrict to wbody 20230528 - inglisd
//
$type_restriction = 'wbody';


$db_salix = null;
try
{
  $db_salix = new database( DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_PREFIX . 'salix' );
}
catch( Exception $e )
{
  write_log( $e->getMessage() );
  return 0;
}

// Instantiate a curl connection to Opal
//
$opal_curl = new opalcurl( OPAL_SERVER, OPAL_PORT, OPAL_USERNAME, OPAL_PASSWORD );
$opal_curl->set_datasource( 'salix' );

// Order of preference for tie breakers when considering how many deployments
// to process among Apex hosts
//
$ordered_host_list = array('dancer' => 1,'bluet' => 2,'skimmer' => 3);
$sql = 'SELECT name, id FROM apex_host';
$res = $db_salix->get_all($sql);
if (false === $res || !is_array($res))
{
  return 0;
}

foreach($res as $item)
{
  $name = $item['name'];
  $ordered_host_list[$name] = $item['id'];
}
$ordered_host_list = array_values($ordered_host_list);

// Verify that for each scan type that has more than one
// side (ie., left and right) and for each host that the allocation of deployments / weighting
// are equal
//
$sql =
 'SELECT type, side, weight, h.name AS host, h.id AS apex_host_id '.
 'FROM allocation a '.
 'JOIN scan_type t ON t.id=a.scan_type_id '.
 'JOIN apex_host h ON h.id=a.apex_host_id';

$res = $db_salix->get_all($sql);
if(false === $res || !is_array($res))
{
  return 0;
}

$host_list = array();
foreach($res as $item)
{
  $id = $item['apex_host_id'];
  $type = $item['type'];
  $side = $item['side'];
  $weight = $item['weight'];
  $host_list[$id][$type][$side] = $weight;

  if(2 == count(array_keys($host_list[$id][$type])) && in_array($side, array('left','right')))
  {
    if($host_list[$id][$type]['left'] != $host_list[$id][$type]['right'])
    {
      write_log('ERROR: asymetric weights');
      return 0;
    }
  }
}

$sql =
  'SELECT type, '.
  'IF(SUM(IF(side="none",0,1))>0,1,0) AS bilateral, '.
  'SUM(weight) AS total_weight '.
  'FROM allocation a '.
  'JOIN scan_type t ON t.id=a.scan_type_id '.
  'JOIN apex_host h ON h.id=a.apex_host_id '.
  'WHERE side IN ("left","none") '.
  'GROUP BY type ORDER BY type';

$res = $db_salix->get_all($sql);
if (false === $res || !is_array($res))
{
  return 0;
}

// Determine weights per host per scan type accounting
// for scan types that are bilateral (ie., left or right)
// 
$collector_list = array();
foreach ($res as $item)
{
  $type = $item['type'];
  $total_weight = round($item['total_weight'], 3);
  foreach ($host_list as $host_id => $type_list)
  {
    if (array_key_exists($type, $type_list))
    {
      $side = $item['bilateral'] ? 'left' : 'none';
      $weight = $type_list[$type][$side];
      $percent = $weight / $total_weight;
      $host_list[$host_id][$type] = $percent;
      $collector_list[] = $type;
    }
  }
}

$residual_scan_list = array();
$deploy_scan_list = array();
$invalid_scan_list = array();

// collector list is an array of unique scan type names (eg., spine, hip, wbody etc.)
//
$collector_list = array_unique($collector_list);
foreach ($collector_list as $type)
{
  if (null !== $type_restriction && $type != $type_restriction) continue;

  // See scan_collector.class.php for implementation details
  // A collector for a given scan type determines the number of
  // scans available for creating deployment records
  //
  $collector = new scan_collector($db_salix, DB_PREFIX, $type);

  // Restrict the range of or specific ranks to collect available
  // scans for deployment.  Usually, the rank restriction should reflect
  // the agreed upon study waves that have been approved for re-analysis.
  //
  // TODO:
  //
  // NOTE THAT ONLY THE SPECFIED RANKS HERE WILL BE COLLECTED FOR DEPLOYMENT.
  // THESE RANK RESTRICTIONS SHOULD BE MOVED TO AN ADMIN CONTROLLED SETTING
  // THROUGH THE WEB UI
  //
  if ('wbody' == $type) $collector->set_rank_restrictions(array(1,2,3));
  if ('spine' == $type) $collector->set_rank_restrictions(array(2));

  if (false === $collector->collect_scans())
  {
    write_log(sprintf('ERROR: failed to collect scans of type %s',$type));
    return 0;
  }

  // The collector determines which deployments can be created based on
  // scan type, allowed ranks, availability, maintaining sibling pairings on
  // hosts when previously deployed baseline scans exist, and balancing the
  // allocation weighting among Apex hosts
  //
  $deployment_list = $collector->get_deployments( $ordered_host_list );

  $stats = $collector->get_count_stats();

  $all_total_candidate = array_sum($stats['numHostCandidates']);
  $total_residual_candidate =
    array_key_exists('any', $stats['numHostCandidates']) ? $stats['numHostCandidates']['any'] : 0;
  $total_targeted_candidate = $all_total_candidate - $total_residual_candidate;
  $all_total_deployment = $stats['numDeployments'];

  $residual_list = 0 < $total_residual_candidate ? $deployment_list['any'] : array();

  // Loop over hosts
  //
  foreach ($host_list as $host_id=>$type_list)
  {
    if (!array_key_exists($type,$type_list)) continue;

    $percent = $type_list[$type];

    $num_priority =
      array_key_exists($host_id,$stats['numHostPriorityCandidates']) ?
      $stats['numHostPriorityCandidates'][$host_id] : 0;
    $num_deployments =
      array_key_exists($host_id,$stats['numHostDeployments']) ?
      $stats['numHostDeployments'][$host_id] : 0;
    $num_targeted =
      array_key_exists($host_id,$stats['numHostCandidates']) ?
      $stats['numHostCandidates'][$host_id] : 0;
    $num_residual = max( array( intval( round(
      $percent*($all_total_deployment + $all_total_candidate) - $num_deployments - $num_targeted, 0) ), 0) );

    write_log( sprintf(
      'host %d must deploy %d candidates (%d priority) + %d additional untargeted (%d available)',
      $host_id,
      $num_targeted,
      $num_priority,
      $num_residual,
      $total_residual_candidate
    ) );

    // the quota for this host
    //
    $quota = intval( round( $percent*$deployment_limit, 0) );

    // take from the targeted scans for this host first
    //
    $list = array_key_exists($host_id, $deployment_list) ? $deployment_list[$host_id] : array();

    write_log(sprintf('host %d: initial number of candidate chains %d',$host_id,count($list)));

    $num_p = 0;
    if (0 < $num_targeted)
    {
      // A 'chain' refers to a set of scans of the same type (and side) belonging to a participant
      // Chains of sibling scans cannot be 'broken' or spread apart among different Apex hosts
      //
      $chain_key_list = array();
      $num_used = 0;
      foreach ($list as $chain_key=>$scan_chain)
      {
        foreach ($scan_chain as $item_key=>$item)
        {
          // validate undeployed scans
          //
          $err = '';
          $filename = $item->get_scan_file( $opal_curl, TEMP_PATH, $err );
          if ( NULL !== $filename )
          {
            if ( false === $item->validate( $filename ) )
            {
              $item->apex_host_id = $host_id;
              $deploy_scan_list[$host_id][] = $item;
              $num_p += $item->priority;
              $quota--;
              $num_used++;
            }
            else
            {
              $invalid_scan_list[] = $item->apex_scan_id;
            }
            unlink( $filename );
          }
          else
          {
            write_log('WARNING: failed to validate scan: ' . $err);
          }
        }// end current scan chain

        $chain_key_list[] = $chain_key;

        // break only on completion of a chain to keep scans grouped by uid
        //
        if (0 >= $quota) break;

      }// end chain list

      foreach ($chain_key_list as $key) unset($list[$key]);

      write_log(sprintf('host %d: used up %d targeted', $host_id, $num_used));

    }//end if there are targets for this host

    // It may not be possible for quotas to be met precisely due to 
    // the possible unavailablity of scans to form complete chains.
    // Quotas can be re-adjusted based on 'residuals'
    //
    if (0 < $num_residual && 0 < $quota && 0 < count($residual_list))
    {
      if ($num_residual < $quota) $quota = $num_residual;
      $num_used = 0;

      $chain_key_list = array();
      foreach ($residual_list as $chain_key=>$scan_chain)
      {
        foreach ($scan_chain as $item_key=>$item)
        {
          // validate undeployed scans
          //
          $filename = $item->get_scan_file( $opal_curl, TEMP_PATH, $err );
          if ( NULL !== $filename )
          {
            if ( false === $item->validate( $filename ) )
            {
              if (in_array($item->apex_scan_id,$residual_scan_list))
              {
                write_log('WARNING: already used residual');
              }
              else
              {
                $residual_scan_list[] = $item->apex_scan_id;
                $item->apex_host_id = $host_id;
                $deploy_scan_list[$host_id][] = $item;
                $num_p += $item->priority;
                $quota--;
                $num_used++;
              }
            }
            else
            {
              $invalid_scan_list[] = $item->apex_scan_id;
            }
            unlink( $filename );
          }
        }// end current scan chain

        $chain_key_list[] = $chain_key;

        // break only on completion of a chain to keep scans grouped to a uid
        //
        if (0 >= $quota) break;

      }// end chain list

      foreach ($chain_key_list as $key) unset($residual_list[$key]);

      write_log(sprintf('host %d: used up %d residuals', $host_id, $num_used));
    }

    write_log( sprintf(
      'host %d: priority deployments: %s, candidate chains remaining %d',
      $host_id,
      $num_p,
      count($list)
    ) );

  }// end loop on host ids
}// end loop on collector types


// The list of invalid scans can now be processed to update
// the invalid state in the apex_scan table
//
if( 0 < count( $invalid_scan_list ) )
{
  $invalid_scan_list = array_unique($invalid_scan_list);
  $sql =  sprintf(
    'UPDATE apex_scan SET invalid=1 WHERE id IN ( %s )',
    implode( ',', $invalid_scan_list )
  );

  if( false === $db_salix->execute( $sql ) )
  {
    write_log( sprintf(
      'WARNING: failed to set invalid state to 1 in %d apex_scan records',
      count( $invalid_scan_list )
    ) );
  }
}

// Track successful record updates in the apex_deployment table
// as a final sanity check
//
$valid_scan_list = array();
foreach($deploy_scan_list as $host_id => $item_list)
{
  $num_deploy = 0;
  foreach($item_list as $item)
  {
    $sql = sprintf(
      'INSERT INTO apex_deployment (apex_scan_id, apex_host_id) VALUES (%d, %d)',
      $item->apex_scan_id,
      $host_id
    );
    if( false !== $db_salix->execute( $sql ) )
    {
      $valid_scan_list[] = $item->apex_scan_id;
      $num_deploy++;
    }
  }
  write_log(sprintf('host %d created %d new deployments',$host_id, $num_deploy));
}

if(0 < count($valid_scan_list))
{
  $sql =  sprintf(
    'UPDATE apex_scan SET invalid=0 WHERE id IN ( %s )',
    implode(',', $valid_scan_list)
  );

  if(false === $db_salix->execute($sql))
  {
    write_log( sprintf(
      'WARNING: failed to set invalid state to 0 in %d apex_scan records',
      count($valid_scan_list)
    ) );
  }
}

return 1;
